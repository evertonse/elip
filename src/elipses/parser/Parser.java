/* This file was generated by SableCC (http://www.sablecc.org/). */

package elipses.parser;

import elipses.lexer.*;
import elipses.node.*;
import elipses.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    @SuppressWarnings({"unchecked","unused"})
    private void push(int numstate, ArrayList<Object> listNode) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PProgram node1 = (PProgram) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AAprogram1Program */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list);
            }
            break;
            case 1: /* reduce AAprogram2Program */
            {
                ArrayList<Object> list = new1();
                push(goTo(0), list);
            }
            break;
            case 2: /* reduce AAdeclfunc1DeclFunc */
            {
                ArrayList<Object> list = new2();
                push(goTo(1), list);
            }
            break;
            case 3: /* reduce AAdeclfunc2DeclFunc */
            {
                ArrayList<Object> list = new3();
                push(goTo(1), list);
            }
            break;
            case 4: /* reduce AIntType */
            {
                ArrayList<Object> list = new4();
                push(goTo(2), list);
            }
            break;
            case 5: /* reduce ABoolType */
            {
                ArrayList<Object> list = new5();
                push(goTo(2), list);
            }
            break;
            case 6: /* reduce ARealType */
            {
                ArrayList<Object> list = new6();
                push(goTo(2), list);
            }
            break;
            case 7: /* reduce AParams */
            {
                ArrayList<Object> list = new7();
                push(goTo(3), list);
            }
            break;
            case 8: /* reduce ASingleParams */
            {
                ArrayList<Object> list = new8();
                push(goTo(3), list);
            }
            break;
            case 9: /* reduce AMultipleParams */
            {
                ArrayList<Object> list = new9();
                push(goTo(3), list);
            }
            break;
            case 10: /* reduce ATypeParam */
            {
                ArrayList<Object> list = new10();
                push(goTo(4), list);
            }
            break;
            case 11: /* reduce ASignatureParam */
            {
                ArrayList<Object> list = new11();
                push(goTo(4), list);
            }
            break;
            case 12: /* reduce ASignature */
            {
                ArrayList<Object> list = new12();
                push(goTo(5), list);
            }
            break;
            case 13: /* reduce ASignatureParams */
            {
                ArrayList<Object> list = new13();
                push(goTo(6), list);
            }
            break;
            case 14: /* reduce ASingleSignatureParams */
            {
                ArrayList<Object> list = new14();
                push(goTo(6), list);
            }
            break;
            case 15: /* reduce AMultipleSignatureParams */
            {
                ArrayList<Object> list = new15();
                push(goTo(6), list);
            }
            break;
            case 16: /* reduce ATypeSignatureParam */
            {
                ArrayList<Object> list = new16();
                push(goTo(7), list);
            }
            break;
            case 17: /* reduce ASignatureSignatureParam */
            {
                ArrayList<Object> list = new17();
                push(goTo(7), list);
            }
            break;
            case 18: /* reduce AExp */
            {
                ArrayList<Object> list = new18();
                push(goTo(8), list);
            }
            break;
            case 19: /* reduce AExpOr */
            {
                ArrayList<Object> list = new19();
                push(goTo(9), list);
            }
            break;
            case 20: /* reduce AOrExpOr */
            {
                ArrayList<Object> list = new20();
                push(goTo(9), list);
            }
            break;
            case 21: /* reduce AExpAnd */
            {
                ArrayList<Object> list = new21();
                push(goTo(10), list);
            }
            break;
            case 22: /* reduce AAndExpAnd */
            {
                ArrayList<Object> list = new22();
                push(goTo(10), list);
            }
            break;
            case 23: /* reduce AExpEquality */
            {
                ArrayList<Object> list = new23();
                push(goTo(11), list);
            }
            break;
            case 24: /* reduce AEqExpEquality */
            {
                ArrayList<Object> list = new24();
                push(goTo(11), list);
            }
            break;
            case 25: /* reduce AExpRelational */
            {
                ArrayList<Object> list = new25();
                push(goTo(12), list);
            }
            break;
            case 26: /* reduce ALtExpRelational */
            {
                ArrayList<Object> list = new26();
                push(goTo(12), list);
            }
            break;
            case 27: /* reduce AGtExpRelational */
            {
                ArrayList<Object> list = new27();
                push(goTo(12), list);
            }
            break;
            case 28: /* reduce AExpAdditive */
            {
                ArrayList<Object> list = new28();
                push(goTo(13), list);
            }
            break;
            case 29: /* reduce APlusExpAdditive */
            {
                ArrayList<Object> list = new29();
                push(goTo(13), list);
            }
            break;
            case 30: /* reduce AMinusExpAdditive */
            {
                ArrayList<Object> list = new30();
                push(goTo(13), list);
            }
            break;
            case 31: /* reduce AExpMultiplicative */
            {
                ArrayList<Object> list = new31();
                push(goTo(14), list);
            }
            break;
            case 32: /* reduce AMultExpMultiplicative */
            {
                ArrayList<Object> list = new32();
                push(goTo(14), list);
            }
            break;
            case 33: /* reduce ADivExpMultiplicative */
            {
                ArrayList<Object> list = new33();
                push(goTo(14), list);
            }
            break;
            case 34: /* reduce AModExpMultiplicative */
            {
                ArrayList<Object> list = new34();
                push(goTo(14), list);
            }
            break;
            case 35: /* reduce AExpUnary */
            {
                ArrayList<Object> list = new35();
                push(goTo(15), list);
            }
            break;
            case 36: /* reduce ANegativeExpUnary */
            {
                ArrayList<Object> list = new36();
                push(goTo(15), list);
            }
            break;
            case 37: /* reduce ANotExpUnary */
            {
                ArrayList<Object> list = new37();
                push(goTo(15), list);
            }
            break;
            case 38: /* reduce AExpTernary */
            {
                ArrayList<Object> list = new38();
                push(goTo(16), list);
            }
            break;
            case 39: /* reduce AIfExpTernary */
            {
                ArrayList<Object> list = new39();
                push(goTo(16), list);
            }
            break;
            case 40: /* reduce AIdExpAtomic */
            {
                ArrayList<Object> list = new40();
                push(goTo(17), list);
            }
            break;
            case 41: /* reduce ABinExpAtomic */
            {
                ArrayList<Object> list = new41();
                push(goTo(17), list);
            }
            break;
            case 42: /* reduce ARealExpAtomic */
            {
                ArrayList<Object> list = new42();
                push(goTo(17), list);
            }
            break;
            case 43: /* reduce AIntExpAtomic */
            {
                ArrayList<Object> list = new43();
                push(goTo(17), list);
            }
            break;
            case 44: /* reduce ATrueExpAtomic */
            {
                ArrayList<Object> list = new44();
                push(goTo(17), list);
            }
            break;
            case 45: /* reduce AFalseExpAtomic */
            {
                ArrayList<Object> list = new45();
                push(goTo(17), list);
            }
            break;
            case 46: /* reduce ABlockExpAtomic */
            {
                ArrayList<Object> list = new46();
                push(goTo(17), list);
            }
            break;
            case 47: /* reduce ACallExpAtomic */
            {
                ArrayList<Object> list = new47();
                push(goTo(17), list);
            }
            break;
            case 48: /* reduce ALambdaExpAtomic */
            {
                ArrayList<Object> list = new48();
                push(goTo(17), list);
            }
            break;
            case 49: /* reduce AAblockblockexp1BlockExp */
            {
                ArrayList<Object> list = new49();
                push(goTo(18), list);
            }
            break;
            case 50: /* reduce AAblockblockexp2BlockExp */
            {
                ArrayList<Object> list = new50();
                push(goTo(18), list);
            }
            break;
            case 51: /* reduce ADeclConst */
            {
                ArrayList<Object> list = new51();
                push(goTo(19), list);
            }
            break;
            case 52: /* reduce AFuncCall */
            {
                ArrayList<Object> list = new52();
                push(goTo(20), list);
            }
            break;
            case 53: /* reduce AFuncLambda */
            {
                ArrayList<Object> list = new53();
                push(goTo(21), list);
            }
            break;
            case 54: /* reduce AListIds */
            {
                ArrayList<Object> list = new54();
                push(goTo(22), list);
            }
            break;
            case 55: /* reduce ASingleListIds */
            {
                ArrayList<Object> list = new55();
                push(goTo(22), list);
            }
            break;
            case 56: /* reduce AMultipleListIds */
            {
                ArrayList<Object> list = new56();
                push(goTo(22), list);
            }
            break;
            case 57: /* reduce AListExp */
            {
                ArrayList<Object> list = new57();
                push(goTo(23), list);
            }
            break;
            case 58: /* reduce ASingleListExp */
            {
                ArrayList<Object> list = new58();
                push(goTo(23), list);
            }
            break;
            case 59: /* reduce AMultipleListExp */
            {
                ArrayList<Object> list = new59();
                push(goTo(23), list);
            }
            break;
            case 60: /* reduce ATerminal$DeclFunc */
            {
                ArrayList<Object> list = new60();
                push(goTo(24), list);
            }
            break;
            case 61: /* reduce ANonTerminal$DeclFunc */
            {
                ArrayList<Object> list = new61();
                push(goTo(24), list);
            }
            break;
            case 62: /* reduce ATerminal$DeclConst */
            {
                ArrayList<Object> list = new62();
                push(goTo(25), list);
            }
            break;
            case 63: /* reduce ANonTerminal$DeclConst */
            {
                ArrayList<Object> list = new63();
                push(goTo(25), list);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AAprogram1Program */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PProgram pprogramNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        }

        pprogramNode1 = new AProgram(listNode2);
        }
	nodeList.add(pprogramNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AAprogram2Program */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgram pprogramNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pprogramNode1 = new AProgram(listNode3);
        }
	nodeList.add(pprogramNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce AAdeclfunc1DeclFunc */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclFunc pdeclfuncNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;
        PType ptypeNode3;
        TIdentifier tidentifierNode4;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        PExp pexpNode7;
        ptypeNode3 = (PType)nodeArrayList2.get(0);
        tidentifierNode4 = (TIdentifier)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList5.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        pexpNode7 = (PExp)nodeArrayList9.get(0);

        pdeclfuncNode1 = new ADeclFunc(null, ptypeNode3, tidentifierNode4, listNode6, pexpNode7);
        }
	nodeList.add(pdeclfuncNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce AAdeclfunc2DeclFunc */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclFunc pdeclfuncNode1;
        {
            // Block
        TKwEntry tkwentryNode2;
        PType ptypeNode3;
        TIdentifier tidentifierNode4;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        PExp pexpNode7;
        tkwentryNode2 = (TKwEntry)nodeArrayList1.get(0);
        ptypeNode3 = (PType)nodeArrayList3.get(0);
        tidentifierNode4 = (TIdentifier)nodeArrayList4.get(0);
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList6.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        pexpNode7 = (PExp)nodeArrayList10.get(0);

        pdeclfuncNode1 = new ADeclFunc(tkwentryNode2, ptypeNode3, tidentifierNode4, listNode6, pexpNode7);
        }
	nodeList.add(pdeclfuncNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce AIntType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TKwInteger tkwintegerNode2;
        tkwintegerNode2 = (TKwInteger)nodeArrayList1.get(0);

        ptypeNode1 = new AIntType(tkwintegerNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce ABoolType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TKwBool tkwboolNode2;
        tkwboolNode2 = (TKwBool)nodeArrayList1.get(0);

        ptypeNode1 = new ABoolType(tkwboolNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce ARealType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TKwReal tkwrealNode2;
        tkwrealNode2 = (TKwReal)nodeArrayList1.get(0);

        ptypeNode1 = new ARealType(tkwrealNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce AParams */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        LinkedList<Object> listNode1 = new LinkedList<Object>();
        {
            // Block
        }
	nodeList.add(listNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce ASingleParams */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PParam pparamNode1;
        pparamNode1 = (PParam)nodeArrayList1.get(0);
	if(pparamNode1 != null)
	{
	  listNode2.add(pparamNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce AMultipleParams */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        PParam pparamNode1;
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        pparamNode1 = (PParam)nodeArrayList1.get(0);
        listNode2 = (LinkedList)nodeArrayList3.get(0);
	if(pparamNode1 != null)
	{
	  listNode3.add(pparamNode1);
	}
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce ATypeParam */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParam pparamNode1;
        {
            // Block
        PType ptypeNode2;
        TIdentifier tidentifierNode3;
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);

        pparamNode1 = new ATypeParam(ptypeNode2, tidentifierNode3);
        }
	nodeList.add(pparamNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce ASignatureParam */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParam pparamNode1;
        {
            // Block
        PSignature psignatureNode2;
        psignatureNode2 = (PSignature)nodeArrayList1.get(0);

        pparamNode1 = new ASignatureParam(psignatureNode2);
        }
	nodeList.add(pparamNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce ASignature */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSignature psignatureNode1;
        {
            // Block
        PType ptypeNode2;
        TIdentifier tidentifierNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList4.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        psignatureNode1 = new ASignature(ptypeNode2, tidentifierNode3, listNode5);
        }
	nodeList.add(psignatureNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce ASignatureParams */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        LinkedList<Object> listNode1 = new LinkedList<Object>();
        {
            // Block
        }
	nodeList.add(listNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce ASingleSignatureParams */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PSignatureParam psignatureparamNode1;
        psignatureparamNode1 = (PSignatureParam)nodeArrayList1.get(0);
	if(psignatureparamNode1 != null)
	{
	  listNode2.add(psignatureparamNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce AMultipleSignatureParams */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        PSignatureParam psignatureparamNode1;
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        psignatureparamNode1 = (PSignatureParam)nodeArrayList1.get(0);
        listNode2 = (LinkedList)nodeArrayList3.get(0);
	if(psignatureparamNode1 != null)
	{
	  listNode3.add(psignatureparamNode1);
	}
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce ATypeSignatureParam */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSignatureParam psignatureparamNode1;
        {
            // Block
        PType ptypeNode2;
        ptypeNode2 = (PType)nodeArrayList1.get(0);

        psignatureparamNode1 = new ATypeSignatureParam(ptypeNode2);
        }
	nodeList.add(psignatureparamNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce ASignatureSignatureParam */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSignatureParam psignatureparamNode1;
        {
            // Block
        PSignature psignatureNode2;
        psignatureNode2 = (PSignature)nodeArrayList1.get(0);

        psignatureparamNode1 = new ASignatureSignatureParam(psignatureNode2);
        }
	nodeList.add(psignatureparamNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce AExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce AExpOr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce AOrExpOr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AOrExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce AExpAnd */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce AAndExpAnd */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AAndExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce AExpEquality */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce AEqExpEquality */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AEqExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce AExpRelational */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce ALtExpRelational */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new ALtExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce AGtExpRelational */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AGtExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce AExpAdditive */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce APlusExpAdditive */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new APlusExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce AMinusExpAdditive */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AMinusExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce AExpMultiplicative */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce AMultExpMultiplicative */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AMultExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce ADivExpMultiplicative */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new ADivExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce AModExpMultiplicative */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AModExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce AExpUnary */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce ANegativeExpUnary */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        pexpNode2 = (PExp)nodeArrayList2.get(0);

        pexpNode1 = new ANegativeExp(pexpNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce ANotExpUnary */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        pexpNode2 = (PExp)nodeArrayList2.get(0);

        pexpNode1 = new ANotExp(pexpNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce AExpTernary */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce AIfExpTernary */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        PExp pexpNode4;
        pexpNode2 = (PExp)nodeArrayList3.get(0);
        pexpNode3 = (PExp)nodeArrayList6.get(0);
        pexpNode4 = (PExp)nodeArrayList8.get(0);

        pexpNode1 = new AIfExp(pexpNode2, pexpNode3, pexpNode4);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce AIdExpAtomic */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);

        pexpNode1 = new AIdExp(tidentifierNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce ABinExpAtomic */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TNumberBin tnumberbinNode2;
        tnumberbinNode2 = (TNumberBin)nodeArrayList1.get(0);

        pexpNode1 = new ABinExp(tnumberbinNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce ARealExpAtomic */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TNumberFrac tnumberfracNode2;
        tnumberfracNode2 = (TNumberFrac)nodeArrayList1.get(0);

        pexpNode1 = new ARealExp(tnumberfracNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce AIntExpAtomic */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TNumberInt tnumberintNode2;
        tnumberintNode2 = (TNumberInt)nodeArrayList1.get(0);

        pexpNode1 = new AIntExp(tnumberintNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new44() /* reduce ATrueExpAtomic */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TKwTrue tkwtrueNode2;
        tkwtrueNode2 = (TKwTrue)nodeArrayList1.get(0);

        pexpNode1 = new ATrueExp(tkwtrueNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new45() /* reduce AFalseExpAtomic */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TKwFalse tkwfalseNode2;
        tkwfalseNode2 = (TKwFalse)nodeArrayList1.get(0);

        pexpNode1 = new AFalseExp(tkwfalseNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new46() /* reduce ABlockExpAtomic */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new47() /* reduce ACallExpAtomic */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new48() /* reduce ALambdaExpAtomic */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new49() /* reduce AAblockblockexp1BlockExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        PExp pexpNode3;
        {
            // Block
        }
        pexpNode3 = (PExp)nodeArrayList2.get(0);

        pexpNode1 = new ABlockExp(listNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new50() /* reduce AAblockblockexp2BlockExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        PExp pexpNode4;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        pexpNode4 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new ABlockExp(listNode3, pexpNode4);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new51() /* reduce ADeclConst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclConst pdeclconstNode1;
        {
            // Block
        PType ptypeNode2;
        TIdentifier tidentifierNode3;
        PExp pexpNode4;
        ptypeNode2 = (PType)nodeArrayList3.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList4.get(0);
        pexpNode4 = (PExp)nodeArrayList6.get(0);

        pdeclconstNode1 = new ADeclConst(ptypeNode2, tidentifierNode3, pexpNode4);
        }
	nodeList.add(pdeclconstNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new52() /* reduce AFuncCall */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList3.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pexpNode1 = new ACallExp(tidentifierNode2, listNode4);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new53() /* reduce AFuncLambda */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList13 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        PExp pexpNode4;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList4.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        pexpNode4 = (PExp)nodeArrayList8.get(0);
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList11.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }

        pexpNode1 = new ALambdaExp(listNode3, pexpNode4, listNode6);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new54() /* reduce AListIds */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        LinkedList<Object> listNode1 = new LinkedList<Object>();
        {
            // Block
        }
	nodeList.add(listNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new55() /* reduce ASingleListIds */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        TIdentifier tidentifierNode1;
        tidentifierNode1 = (TIdentifier)nodeArrayList1.get(0);
	if(tidentifierNode1 != null)
	{
	  listNode2.add(tidentifierNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new56() /* reduce AMultipleListIds */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        TIdentifier tidentifierNode1;
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        tidentifierNode1 = (TIdentifier)nodeArrayList1.get(0);
        listNode2 = (LinkedList)nodeArrayList3.get(0);
	if(tidentifierNode1 != null)
	{
	  listNode3.add(tidentifierNode1);
	}
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new57() /* reduce AListExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        LinkedList<Object> listNode1 = new LinkedList<Object>();
        {
            // Block
        }
	nodeList.add(listNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new58() /* reduce ASingleListExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	if(pexpNode1 != null)
	{
	  listNode2.add(pexpNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new59() /* reduce AMultipleListExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        PExp pexpNode1;
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        pexpNode1 = (PExp)nodeArrayList1.get(0);
        listNode2 = (LinkedList)nodeArrayList3.get(0);
	if(pexpNode1 != null)
	{
	  listNode3.add(pexpNode1);
	}
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new60() /* reduce ATerminal$DeclFunc */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PDeclFunc pdeclfuncNode1;
        pdeclfuncNode1 = (PDeclFunc)nodeArrayList1.get(0);
	if(pdeclfuncNode1 != null)
	{
	  listNode2.add(pdeclfuncNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new61() /* reduce ANonTerminal$DeclFunc */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PDeclFunc pdeclfuncNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pdeclfuncNode2 = (PDeclFunc)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pdeclfuncNode2 != null)
	{
	  listNode3.add(pdeclfuncNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new62() /* reduce ATerminal$DeclConst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PDeclConst pdeclconstNode1;
        pdeclconstNode1 = (PDeclConst)nodeArrayList1.get(0);
	if(pdeclconstNode1 != null)
	{
	  listNode2.add(pdeclconstNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new63() /* reduce ANonTerminal$DeclConst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PDeclConst pdeclconstNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pdeclconstNode2 = (PDeclConst)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pdeclconstNode2 != null)
	{
	  listNode3.add(pdeclconstNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, REDUCE, 0}, {6, SHIFT, 1}, {19, SHIFT, 2}, },
			{{-1, ERROR, 1}, {19, SHIFT, 6}, },
			{{-1, ERROR, 2}, {1, SHIFT, 7}, {2, SHIFT, 8}, {3, SHIFT, 9}, },
			{{-1, ERROR, 3}, {32, ACCEPT, -1}, },
			{{-1, REDUCE, 60}, },
			{{-1, REDUCE, 1}, {6, SHIFT, 1}, {19, SHIFT, 2}, },
			{{-1, ERROR, 6}, {1, SHIFT, 7}, {2, SHIFT, 8}, {3, SHIFT, 9}, },
			{{-1, REDUCE, 4}, },
			{{-1, REDUCE, 6}, },
			{{-1, REDUCE, 5}, },
			{{-1, ERROR, 10}, {28, SHIFT, 13}, },
			{{-1, REDUCE, 61}, },
			{{-1, ERROR, 12}, {28, SHIFT, 14}, },
			{{-1, ERROR, 13}, {19, SHIFT, 15}, },
			{{-1, ERROR, 14}, {19, SHIFT, 16}, },
			{{-1, REDUCE, 7}, {1, SHIFT, 7}, {2, SHIFT, 8}, {3, SHIFT, 9}, },
			{{-1, REDUCE, 7}, {1, SHIFT, 7}, {2, SHIFT, 8}, {3, SHIFT, 9}, },
			{{-1, ERROR, 17}, {28, SHIFT, 22}, },
			{{-1, ERROR, 18}, {20, SHIFT, 23}, },
			{{-1, REDUCE, 8}, {23, SHIFT, 24}, },
			{{-1, REDUCE, 11}, },
			{{-1, ERROR, 21}, {20, SHIFT, 25}, },
			{{-1, REDUCE, 10}, {19, SHIFT, 26}, },
			{{-1, ERROR, 23}, {24, SHIFT, 27}, },
			{{-1, REDUCE, 7}, {1, SHIFT, 7}, {2, SHIFT, 8}, {3, SHIFT, 9}, },
			{{-1, ERROR, 25}, {24, SHIFT, 29}, },
			{{-1, REDUCE, 13}, {1, SHIFT, 7}, {2, SHIFT, 8}, {3, SHIFT, 9}, },
			{{-1, ERROR, 27}, {19, SHIFT, 34}, },
			{{-1, REDUCE, 9}, },
			{{-1, ERROR, 29}, {19, SHIFT, 35}, },
			{{-1, REDUCE, 16}, {28, SHIFT, 36}, },
			{{-1, REDUCE, 17}, },
			{{-1, ERROR, 32}, {20, SHIFT, 37}, },
			{{-1, REDUCE, 14}, {23, SHIFT, 38}, },
			{{-1, ERROR, 34}, {4, SHIFT, 39}, {5, SHIFT, 40}, {7, SHIFT, 41}, {11, SHIFT, 42}, {15, SHIFT, 43}, {19, SHIFT, 44}, {28, SHIFT, 45}, {29, SHIFT, 46}, {30, SHIFT, 47}, {31, SHIFT, 48}, },
			{{-1, ERROR, 35}, {4, SHIFT, 39}, {5, SHIFT, 40}, {7, SHIFT, 41}, {11, SHIFT, 42}, {15, SHIFT, 43}, {19, SHIFT, 44}, {28, SHIFT, 45}, {29, SHIFT, 46}, {30, SHIFT, 47}, {31, SHIFT, 48}, },
			{{-1, ERROR, 36}, {19, SHIFT, 26}, },
			{{-1, REDUCE, 12}, },
			{{-1, REDUCE, 13}, {1, SHIFT, 7}, {2, SHIFT, 8}, {3, SHIFT, 9}, },
			{{-1, REDUCE, 44}, },
			{{-1, REDUCE, 45}, },
			{{-1, ERROR, 41}, {19, SHIFT, 64}, },
			{{-1, ERROR, 42}, {4, SHIFT, 39}, {5, SHIFT, 40}, {7, SHIFT, 41}, {11, SHIFT, 42}, {15, SHIFT, 43}, {19, SHIFT, 44}, {28, SHIFT, 45}, {29, SHIFT, 46}, {30, SHIFT, 47}, {31, SHIFT, 48}, },
			{{-1, ERROR, 43}, {4, SHIFT, 39}, {5, SHIFT, 40}, {7, SHIFT, 41}, {11, SHIFT, 42}, {15, SHIFT, 43}, {19, SHIFT, 44}, {28, SHIFT, 45}, {29, SHIFT, 46}, {30, SHIFT, 47}, {31, SHIFT, 48}, },
			{{-1, ERROR, 44}, {4, SHIFT, 39}, {5, SHIFT, 40}, {7, SHIFT, 41}, {11, SHIFT, 42}, {13, SHIFT, 67}, {15, SHIFT, 43}, {19, SHIFT, 68}, {28, SHIFT, 45}, {29, SHIFT, 46}, {30, SHIFT, 47}, {31, SHIFT, 48}, },
			{{-1, REDUCE, 40}, {19, SHIFT, 72}, },
			{{-1, REDUCE, 43}, },
			{{-1, REDUCE, 42}, },
			{{-1, REDUCE, 41}, },
			{{-1, ERROR, 49}, {20, SHIFT, 73}, },
			{{-1, REDUCE, 18}, {12, SHIFT, 74}, },
			{{-1, REDUCE, 19}, {10, SHIFT, 75}, },
			{{-1, REDUCE, 21}, {25, SHIFT, 76}, },
			{{-1, REDUCE, 23}, {26, SHIFT, 77}, {27, SHIFT, 78}, },
			{{-1, REDUCE, 25}, {14, SHIFT, 79}, {15, SHIFT, 80}, },
			{{-1, REDUCE, 28}, {16, SHIFT, 81}, {17, SHIFT, 82}, {18, SHIFT, 83}, },
			{{-1, REDUCE, 31}, },
			{{-1, REDUCE, 35}, },
			{{-1, REDUCE, 38}, },
			{{-1, REDUCE, 46}, },
			{{-1, REDUCE, 47}, },
			{{-1, REDUCE, 48}, },
			{{-1, ERROR, 62}, {20, SHIFT, 84}, },
			{{-1, REDUCE, 15}, },
			{{-1, ERROR, 64}, {4, SHIFT, 39}, {5, SHIFT, 40}, {7, SHIFT, 41}, {11, SHIFT, 42}, {15, SHIFT, 43}, {19, SHIFT, 44}, {28, SHIFT, 45}, {29, SHIFT, 46}, {30, SHIFT, 47}, {31, SHIFT, 48}, },
			{{-1, REDUCE, 37}, },
			{{-1, REDUCE, 36}, },
			{{-1, ERROR, 67}, {19, SHIFT, 86}, },
			{{-1, ERROR, 68}, {0, SHIFT, 87}, {4, SHIFT, 39}, {5, SHIFT, 40}, {7, SHIFT, 41}, {11, SHIFT, 42}, {13, SHIFT, 67}, {15, SHIFT, 43}, {19, SHIFT, 68}, {28, SHIFT, 45}, {29, SHIFT, 46}, {30, SHIFT, 47}, {31, SHIFT, 48}, },
			{{-1, ERROR, 69}, {20, SHIFT, 88}, },
			{{-1, REDUCE, 62}, },
			{{-1, ERROR, 71}, {4, SHIFT, 39}, {5, SHIFT, 40}, {7, SHIFT, 41}, {11, SHIFT, 42}, {15, SHIFT, 43}, {19, SHIFT, 68}, {28, SHIFT, 45}, {29, SHIFT, 46}, {30, SHIFT, 47}, {31, SHIFT, 48}, },
			{{-1, REDUCE, 57}, {4, SHIFT, 39}, {5, SHIFT, 40}, {7, SHIFT, 41}, {11, SHIFT, 42}, {15, SHIFT, 43}, {19, SHIFT, 44}, {28, SHIFT, 45}, {29, SHIFT, 46}, {30, SHIFT, 47}, {31, SHIFT, 48}, },
			{{-1, ERROR, 73}, {20, SHIFT, 93}, },
			{{-1, ERROR, 74}, {4, SHIFT, 39}, {5, SHIFT, 40}, {7, SHIFT, 41}, {11, SHIFT, 42}, {15, SHIFT, 43}, {19, SHIFT, 44}, {28, SHIFT, 45}, {29, SHIFT, 46}, {30, SHIFT, 47}, {31, SHIFT, 48}, },
			{{-1, ERROR, 75}, {4, SHIFT, 39}, {5, SHIFT, 40}, {7, SHIFT, 41}, {11, SHIFT, 42}, {15, SHIFT, 43}, {19, SHIFT, 44}, {28, SHIFT, 45}, {29, SHIFT, 46}, {30, SHIFT, 47}, {31, SHIFT, 48}, },
			{{-1, ERROR, 76}, {4, SHIFT, 39}, {5, SHIFT, 40}, {7, SHIFT, 41}, {11, SHIFT, 42}, {15, SHIFT, 43}, {19, SHIFT, 44}, {28, SHIFT, 45}, {29, SHIFT, 46}, {30, SHIFT, 47}, {31, SHIFT, 48}, },
			{{-1, ERROR, 77}, {4, SHIFT, 39}, {5, SHIFT, 40}, {7, SHIFT, 41}, {11, SHIFT, 42}, {15, SHIFT, 43}, {19, SHIFT, 44}, {28, SHIFT, 45}, {29, SHIFT, 46}, {30, SHIFT, 47}, {31, SHIFT, 48}, },
			{{-1, ERROR, 78}, {4, SHIFT, 39}, {5, SHIFT, 40}, {7, SHIFT, 41}, {11, SHIFT, 42}, {15, SHIFT, 43}, {19, SHIFT, 44}, {28, SHIFT, 45}, {29, SHIFT, 46}, {30, SHIFT, 47}, {31, SHIFT, 48}, },
			{{-1, ERROR, 79}, {4, SHIFT, 39}, {5, SHIFT, 40}, {7, SHIFT, 41}, {11, SHIFT, 42}, {15, SHIFT, 43}, {19, SHIFT, 44}, {28, SHIFT, 45}, {29, SHIFT, 46}, {30, SHIFT, 47}, {31, SHIFT, 48}, },
			{{-1, ERROR, 80}, {4, SHIFT, 39}, {5, SHIFT, 40}, {7, SHIFT, 41}, {11, SHIFT, 42}, {15, SHIFT, 43}, {19, SHIFT, 44}, {28, SHIFT, 45}, {29, SHIFT, 46}, {30, SHIFT, 47}, {31, SHIFT, 48}, },
			{{-1, ERROR, 81}, {4, SHIFT, 39}, {5, SHIFT, 40}, {7, SHIFT, 41}, {11, SHIFT, 42}, {15, SHIFT, 43}, {19, SHIFT, 44}, {28, SHIFT, 45}, {29, SHIFT, 46}, {30, SHIFT, 47}, {31, SHIFT, 48}, },
			{{-1, ERROR, 82}, {4, SHIFT, 39}, {5, SHIFT, 40}, {7, SHIFT, 41}, {11, SHIFT, 42}, {15, SHIFT, 43}, {19, SHIFT, 44}, {28, SHIFT, 45}, {29, SHIFT, 46}, {30, SHIFT, 47}, {31, SHIFT, 48}, },
			{{-1, ERROR, 83}, {4, SHIFT, 39}, {5, SHIFT, 40}, {7, SHIFT, 41}, {11, SHIFT, 42}, {15, SHIFT, 43}, {19, SHIFT, 44}, {28, SHIFT, 45}, {29, SHIFT, 46}, {30, SHIFT, 47}, {31, SHIFT, 48}, },
			{{-1, ERROR, 84}, {20, SHIFT, 104}, },
			{{-1, ERROR, 85}, {20, SHIFT, 105}, },
			{{-1, REDUCE, 54}, {28, SHIFT, 106}, },
			{{-1, ERROR, 87}, {1, SHIFT, 7}, {2, SHIFT, 8}, {3, SHIFT, 9}, },
			{{-1, REDUCE, 49}, },
			{{-1, ERROR, 89}, {20, SHIFT, 109}, },
			{{-1, REDUCE, 63}, },
			{{-1, REDUCE, 58}, {23, SHIFT, 110}, },
			{{-1, ERROR, 92}, {20, SHIFT, 111}, },
			{{-1, REDUCE, 2}, },
			{{-1, REDUCE, 20}, {10, SHIFT, 75}, },
			{{-1, REDUCE, 22}, {25, SHIFT, 76}, },
			{{-1, REDUCE, 24}, {26, SHIFT, 77}, {27, SHIFT, 78}, },
			{{-1, REDUCE, 26}, {14, SHIFT, 79}, {15, SHIFT, 80}, },
			{{-1, REDUCE, 27}, {14, SHIFT, 79}, {15, SHIFT, 80}, },
			{{-1, REDUCE, 29}, {16, SHIFT, 81}, {17, SHIFT, 82}, {18, SHIFT, 83}, },
			{{-1, REDUCE, 30}, {16, SHIFT, 81}, {17, SHIFT, 82}, {18, SHIFT, 83}, },
			{{-1, REDUCE, 32}, },
			{{-1, REDUCE, 33}, },
			{{-1, REDUCE, 34}, },
			{{-1, REDUCE, 3}, },
			{{-1, ERROR, 105}, {8, SHIFT, 112}, },
			{{-1, REDUCE, 55}, {23, SHIFT, 113}, },
			{{-1, ERROR, 107}, {20, SHIFT, 114}, },
			{{-1, ERROR, 108}, {28, SHIFT, 115}, },
			{{-1, REDUCE, 50}, },
			{{-1, REDUCE, 57}, {4, SHIFT, 39}, {5, SHIFT, 40}, {7, SHIFT, 41}, {11, SHIFT, 42}, {15, SHIFT, 43}, {19, SHIFT, 44}, {28, SHIFT, 45}, {29, SHIFT, 46}, {30, SHIFT, 47}, {31, SHIFT, 48}, },
			{{-1, REDUCE, 52}, },
			{{-1, ERROR, 112}, {4, SHIFT, 39}, {5, SHIFT, 40}, {7, SHIFT, 41}, {11, SHIFT, 42}, {15, SHIFT, 43}, {19, SHIFT, 44}, {28, SHIFT, 45}, {29, SHIFT, 46}, {30, SHIFT, 47}, {31, SHIFT, 48}, },
			{{-1, REDUCE, 54}, {28, SHIFT, 106}, },
			{{-1, ERROR, 114}, {24, SHIFT, 119}, },
			{{-1, ERROR, 115}, {19, SHIFT, 120}, },
			{{-1, REDUCE, 59}, },
			{{-1, ERROR, 117}, {9, SHIFT, 121}, },
			{{-1, REDUCE, 56}, },
			{{-1, ERROR, 119}, {19, SHIFT, 122}, },
			{{-1, ERROR, 120}, {4, SHIFT, 39}, {5, SHIFT, 40}, {7, SHIFT, 41}, {11, SHIFT, 42}, {15, SHIFT, 43}, {19, SHIFT, 44}, {28, SHIFT, 45}, {29, SHIFT, 46}, {30, SHIFT, 47}, {31, SHIFT, 48}, },
			{{-1, ERROR, 121}, {4, SHIFT, 39}, {5, SHIFT, 40}, {7, SHIFT, 41}, {11, SHIFT, 42}, {15, SHIFT, 43}, {19, SHIFT, 44}, {28, SHIFT, 45}, {29, SHIFT, 46}, {30, SHIFT, 47}, {31, SHIFT, 48}, },
			{{-1, ERROR, 122}, {4, SHIFT, 39}, {5, SHIFT, 40}, {7, SHIFT, 41}, {11, SHIFT, 42}, {15, SHIFT, 43}, {19, SHIFT, 44}, {28, SHIFT, 45}, {29, SHIFT, 46}, {30, SHIFT, 47}, {31, SHIFT, 48}, },
			{{-1, ERROR, 123}, {20, SHIFT, 126}, },
			{{-1, REDUCE, 39}, },
			{{-1, ERROR, 125}, {20, SHIFT, 127}, },
			{{-1, ERROR, 126}, {20, SHIFT, 128}, },
			{{-1, ERROR, 127}, {21, SHIFT, 129}, },
			{{-1, REDUCE, 51}, },
			{{-1, REDUCE, 57}, {4, SHIFT, 39}, {5, SHIFT, 40}, {7, SHIFT, 41}, {11, SHIFT, 42}, {15, SHIFT, 43}, {19, SHIFT, 44}, {28, SHIFT, 45}, {29, SHIFT, 46}, {30, SHIFT, 47}, {31, SHIFT, 48}, },
			{{-1, ERROR, 130}, {22, SHIFT, 131}, },
			{{-1, ERROR, 131}, {20, SHIFT, 132}, },
			{{-1, REDUCE, 53}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 3}, },
			{{-1, 4}, {5, 11}, },
			{{-1, 17}, {2, 10}, {6, 12}, {26, 30}, {38, 30}, {87, 108}, },
			{{-1, 18}, {16, 21}, {24, 28}, },
			{{-1, 19}, },
			{{-1, 20}, {26, 31}, {38, 31}, },
			{{-1, 32}, {38, 63}, },
			{{-1, 33}, },
			{{-1, 91}, {34, 49}, {35, 62}, {44, 69}, {64, 85}, {68, 69}, {71, 89}, {112, 117}, {120, 123}, {122, 125}, },
			{{-1, 50}, },
			{{-1, 51}, {74, 94}, },
			{{-1, 52}, {75, 95}, },
			{{-1, 53}, {76, 96}, },
			{{-1, 54}, {77, 97}, {78, 98}, },
			{{-1, 55}, {79, 99}, {80, 100}, },
			{{-1, 56}, {42, 65}, {43, 66}, {81, 101}, {82, 102}, {83, 103}, {121, 124}, },
			{{-1, 57}, },
			{{-1, 58}, },
			{{-1, 59}, },
			{{-1, 70}, {71, 90}, },
			{{-1, 60}, },
			{{-1, 61}, },
			{{-1, 107}, {113, 118}, },
			{{-1, 92}, {110, 116}, {129, 130}, },
			{{-1, 5}, },
			{{-1, 71}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'entrada', '(', EOF",
			"expecting: '('",
			"expecting: 'inteiro', 'real', 'booleano'",
			"expecting: EOF",
			"expecting: ')', '|', identifier",
			"expecting: identifier",
			"expecting: 'inteiro', 'real', 'booleano', ')'",
			"expecting: ')'",
			"expecting: ')', '|'",
			"expecting: '(', ')', '|'",
			"expecting: ':'",
			"expecting: 'verdadeiro', 'falso', 'se', 'nao', '-', '(', identifier, number int, number frac, number bin",
			"expecting: 'senao', 'e', 'ou', '+', '-', '*', '/', '%', ')', ']', '|', '=', '<', '>'",
			"expecting: 'verdadeiro', 'falso', 'se', 'nao', 'lambda', '-', '(', identifier, number int, number frac, number bin",
			"expecting: 'senao', 'e', 'ou', '+', '-', '*', '/', '%', '(', ')', ']', '|', '=', '<', '>'",
			"expecting: 'senao', 'ou', ')', ']', '|'",
			"expecting: 'senao', 'e', 'ou', ')', ']', '|'",
			"expecting: 'senao', 'e', 'ou', ')', ']', '|', '='",
			"expecting: 'senao', 'e', 'ou', ')', ']', '|', '=', '<', '>'",
			"expecting: 'senao', 'e', 'ou', '+', '-', ')', ']', '|', '=', '<', '>'",
			"expecting: 'const', 'verdadeiro', 'falso', 'se', 'nao', 'lambda', '-', '(', identifier, number int, number frac, number bin",
			"expecting: 'verdadeiro', 'falso', 'se', 'nao', '-', '(', ')', identifier, number int, number frac, number bin",
			"expecting: ')', identifier",
			"expecting: ')', ']', '|'",
			"expecting: 'entao'",
			"expecting: 'verdadeiro', 'falso', 'se', 'nao', '-', '(', ')', ']', identifier, number int, number frac, number bin",
			"expecting: ')', ']'",
			"expecting: 'senao'",
			"expecting: '['",
			"expecting: 'verdadeiro', 'falso', 'se', 'nao', '-', '(', ']', identifier, number int, number frac, number bin",
			"expecting: ']'",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 0, 0, 2, 4, 4, 4, 5, 0, 5, 1, 1, 6, 6, 5, 7, 8, 8, 7, 9, 10, 6, 10, 6, 1, 7, 1, 4, 8, 7, 8, 11, 11, 1, 8, 6, 12, 12, 1, 11, 11, 13, 14, 12, 12, 12, 7, 15, 16, 17, 18, 19, 12, 12, 12, 12, 12, 12, 12, 7, 7, 11, 12, 12, 1, 20, 7, 11, 11, 21, 7, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 7, 7, 22, 2, 12, 7, 11, 23, 7, 0, 16, 17, 18, 19, 19, 12, 12, 12, 12, 12, 0, 24, 8, 7, 5, 12, 25, 12, 11, 22, 10, 1, 26, 27, 7, 1, 11, 11, 11, 7, 12, 7, 7, 28, 11, 29, 30, 7, 12, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
