/* This file was generated by SableCC (http://www.sablecc.org/). */

package elipses.analysis;

import java.util.*;
import elipses.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPProgram().apply(this);
        outStart(node);
    }

    public void inAProgram(AProgram node)
    {
        defaultIn(node);
    }

    public void outAProgram(AProgram node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProgram(AProgram node)
    {
        inAProgram(node);
        {
            List<PDeclFunc> copy = new ArrayList<PDeclFunc>(node.getDeclFunc());
            Collections.reverse(copy);
            for(PDeclFunc e : copy)
            {
                e.apply(this);
            }
        }
        outAProgram(node);
    }

    public void inADeclFunc(ADeclFunc node)
    {
        defaultIn(node);
    }

    public void outADeclFunc(ADeclFunc node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclFunc(ADeclFunc node)
    {
        inADeclFunc(node);
        if(node.getRp1() != null)
        {
            node.getRp1().apply(this);
        }
        if(node.getRp3() != null)
        {
            node.getRp3().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getLp3() != null)
        {
            node.getLp3().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getRp2() != null)
        {
            node.getRp2().apply(this);
        }
        if(node.getParams() != null)
        {
            node.getParams().apply(this);
        }
        if(node.getLp2() != null)
        {
            node.getLp2().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getLp1() != null)
        {
            node.getLp1().apply(this);
        }
        if(node.getKwEntry() != null)
        {
            node.getKwEntry().apply(this);
        }
        outADeclFunc(node);
    }

    public void inAIntType(AIntType node)
    {
        defaultIn(node);
    }

    public void outAIntType(AIntType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntType(AIntType node)
    {
        inAIntType(node);
        if(node.getKwInteger() != null)
        {
            node.getKwInteger().apply(this);
        }
        outAIntType(node);
    }

    public void inABoolType(ABoolType node)
    {
        defaultIn(node);
    }

    public void outABoolType(ABoolType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABoolType(ABoolType node)
    {
        inABoolType(node);
        if(node.getKwBool() != null)
        {
            node.getKwBool().apply(this);
        }
        outABoolType(node);
    }

    public void inARealType(ARealType node)
    {
        defaultIn(node);
    }

    public void outARealType(ARealType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARealType(ARealType node)
    {
        inARealType(node);
        if(node.getKwReal() != null)
        {
            node.getKwReal().apply(this);
        }
        outARealType(node);
    }

    public void inAParams(AParams node)
    {
        defaultIn(node);
    }

    public void outAParams(AParams node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParams(AParams node)
    {
        inAParams(node);
        outAParams(node);
    }

    public void inASingleParams(ASingleParams node)
    {
        defaultIn(node);
    }

    public void outASingleParams(ASingleParams node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASingleParams(ASingleParams node)
    {
        inASingleParams(node);
        if(node.getParam() != null)
        {
            node.getParam().apply(this);
        }
        outASingleParams(node);
    }

    public void inAMultipleParams(AMultipleParams node)
    {
        defaultIn(node);
    }

    public void outAMultipleParams(AMultipleParams node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultipleParams(AMultipleParams node)
    {
        inAMultipleParams(node);
        if(node.getParams() != null)
        {
            node.getParams().apply(this);
        }
        if(node.getPipe() != null)
        {
            node.getPipe().apply(this);
        }
        if(node.getParam() != null)
        {
            node.getParam().apply(this);
        }
        outAMultipleParams(node);
    }

    public void inATypeParam(ATypeParam node)
    {
        defaultIn(node);
    }

    public void outATypeParam(ATypeParam node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATypeParam(ATypeParam node)
    {
        inATypeParam(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        outATypeParam(node);
    }

    public void inASignatureParam(ASignatureParam node)
    {
        defaultIn(node);
    }

    public void outASignatureParam(ASignatureParam node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASignatureParam(ASignatureParam node)
    {
        inASignatureParam(node);
        if(node.getSignature() != null)
        {
            node.getSignature().apply(this);
        }
        outASignatureParam(node);
    }

    public void inASignature(ASignature node)
    {
        defaultIn(node);
    }

    public void outASignature(ASignature node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASignature(ASignature node)
    {
        inASignature(node);
        if(node.getRParen() != null)
        {
            node.getRParen().apply(this);
        }
        if(node.getSignatureParams() != null)
        {
            node.getSignatureParams().apply(this);
        }
        if(node.getLParen() != null)
        {
            node.getLParen().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        outASignature(node);
    }

    public void inASignatureParams(ASignatureParams node)
    {
        defaultIn(node);
    }

    public void outASignatureParams(ASignatureParams node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASignatureParams(ASignatureParams node)
    {
        inASignatureParams(node);
        outASignatureParams(node);
    }

    public void inASingleSignatureParams(ASingleSignatureParams node)
    {
        defaultIn(node);
    }

    public void outASingleSignatureParams(ASingleSignatureParams node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASingleSignatureParams(ASingleSignatureParams node)
    {
        inASingleSignatureParams(node);
        if(node.getSignatureParam() != null)
        {
            node.getSignatureParam().apply(this);
        }
        outASingleSignatureParams(node);
    }

    public void inAMultipleSignatureParams(AMultipleSignatureParams node)
    {
        defaultIn(node);
    }

    public void outAMultipleSignatureParams(AMultipleSignatureParams node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultipleSignatureParams(AMultipleSignatureParams node)
    {
        inAMultipleSignatureParams(node);
        if(node.getSignatureParams() != null)
        {
            node.getSignatureParams().apply(this);
        }
        if(node.getPipe() != null)
        {
            node.getPipe().apply(this);
        }
        if(node.getSignatureParam() != null)
        {
            node.getSignatureParam().apply(this);
        }
        outAMultipleSignatureParams(node);
    }

    public void inATypeSignatureParam(ATypeSignatureParam node)
    {
        defaultIn(node);
    }

    public void outATypeSignatureParam(ATypeSignatureParam node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATypeSignatureParam(ATypeSignatureParam node)
    {
        inATypeSignatureParam(node);
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        outATypeSignatureParam(node);
    }

    public void inASignatureSignatureParam(ASignatureSignatureParam node)
    {
        defaultIn(node);
    }

    public void outASignatureSignatureParam(ASignatureSignatureParam node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASignatureSignatureParam(ASignatureSignatureParam node)
    {
        inASignatureSignatureParam(node);
        if(node.getSignature() != null)
        {
            node.getSignature().apply(this);
        }
        outASignatureSignatureParam(node);
    }

    public void inAOrExp(AOrExp node)
    {
        defaultIn(node);
    }

    public void outAOrExp(AOrExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOrExp(AOrExp node)
    {
        inAOrExp(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAOrExp(node);
    }

    public void inAAndExp(AAndExp node)
    {
        defaultIn(node);
    }

    public void outAAndExp(AAndExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAndExp(AAndExp node)
    {
        inAAndExp(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAAndExp(node);
    }

    public void inAEqExp(AEqExp node)
    {
        defaultIn(node);
    }

    public void outAEqExp(AEqExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEqExp(AEqExp node)
    {
        inAEqExp(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAEqExp(node);
    }

    public void inALtExp(ALtExp node)
    {
        defaultIn(node);
    }

    public void outALtExp(ALtExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALtExp(ALtExp node)
    {
        inALtExp(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outALtExp(node);
    }

    public void inAGtExp(AGtExp node)
    {
        defaultIn(node);
    }

    public void outAGtExp(AGtExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGtExp(AGtExp node)
    {
        inAGtExp(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAGtExp(node);
    }

    public void inAPlusExp(APlusExp node)
    {
        defaultIn(node);
    }

    public void outAPlusExp(APlusExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPlusExp(APlusExp node)
    {
        inAPlusExp(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAPlusExp(node);
    }

    public void inAMinusExp(AMinusExp node)
    {
        defaultIn(node);
    }

    public void outAMinusExp(AMinusExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinusExp(AMinusExp node)
    {
        inAMinusExp(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAMinusExp(node);
    }

    public void inAMultExp(AMultExp node)
    {
        defaultIn(node);
    }

    public void outAMultExp(AMultExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultExp(AMultExp node)
    {
        inAMultExp(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAMultExp(node);
    }

    public void inADivExp(ADivExp node)
    {
        defaultIn(node);
    }

    public void outADivExp(ADivExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivExp(ADivExp node)
    {
        inADivExp(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outADivExp(node);
    }

    public void inAModExp(AModExp node)
    {
        defaultIn(node);
    }

    public void outAModExp(AModExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAModExp(AModExp node)
    {
        inAModExp(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAModExp(node);
    }

    public void inANegativeExp(ANegativeExp node)
    {
        defaultIn(node);
    }

    public void outANegativeExp(ANegativeExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANegativeExp(ANegativeExp node)
    {
        inANegativeExp(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outANegativeExp(node);
    }

    public void inANotExp(ANotExp node)
    {
        defaultIn(node);
    }

    public void outANotExp(ANotExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANotExp(ANotExp node)
    {
        inANotExp(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outANotExp(node);
    }

    public void inAIfExp(AIfExp node)
    {
        defaultIn(node);
    }

    public void outAIfExp(AIfExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfExp(AIfExp node)
    {
        inAIfExp(node);
        if(node.getFalsy() != null)
        {
            node.getFalsy().apply(this);
        }
        if(node.getTruthy() != null)
        {
            node.getTruthy().apply(this);
        }
        if(node.getCond() != null)
        {
            node.getCond().apply(this);
        }
        outAIfExp(node);
    }

    public void inAIdExp(AIdExp node)
    {
        defaultIn(node);
    }

    public void outAIdExp(AIdExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdExp(AIdExp node)
    {
        inAIdExp(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAIdExp(node);
    }

    public void inABinExp(ABinExp node)
    {
        defaultIn(node);
    }

    public void outABinExp(ABinExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABinExp(ABinExp node)
    {
        inABinExp(node);
        if(node.getNumberBin() != null)
        {
            node.getNumberBin().apply(this);
        }
        outABinExp(node);
    }

    public void inARealExp(ARealExp node)
    {
        defaultIn(node);
    }

    public void outARealExp(ARealExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARealExp(ARealExp node)
    {
        inARealExp(node);
        if(node.getNumberFrac() != null)
        {
            node.getNumberFrac().apply(this);
        }
        outARealExp(node);
    }

    public void inAIntExp(AIntExp node)
    {
        defaultIn(node);
    }

    public void outAIntExp(AIntExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntExp(AIntExp node)
    {
        inAIntExp(node);
        if(node.getNumberInt() != null)
        {
            node.getNumberInt().apply(this);
        }
        outAIntExp(node);
    }

    public void inATrueExp(ATrueExp node)
    {
        defaultIn(node);
    }

    public void outATrueExp(ATrueExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATrueExp(ATrueExp node)
    {
        inATrueExp(node);
        if(node.getKwTrue() != null)
        {
            node.getKwTrue().apply(this);
        }
        outATrueExp(node);
    }

    public void inAFalseExp(AFalseExp node)
    {
        defaultIn(node);
    }

    public void outAFalseExp(AFalseExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFalseExp(AFalseExp node)
    {
        inAFalseExp(node);
        if(node.getKwFalse() != null)
        {
            node.getKwFalse().apply(this);
        }
        outAFalseExp(node);
    }

    public void inABlockExp(ABlockExp node)
    {
        defaultIn(node);
    }

    public void outABlockExp(ABlockExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlockExp(ABlockExp node)
    {
        inABlockExp(node);
        if(node.getBlockExp() != null)
        {
            node.getBlockExp().apply(this);
        }
        outABlockExp(node);
    }

    public void inACallExp(ACallExp node)
    {
        defaultIn(node);
    }

    public void outACallExp(ACallExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACallExp(ACallExp node)
    {
        inACallExp(node);
        if(node.getFuncCall() != null)
        {
            node.getFuncCall().apply(this);
        }
        outACallExp(node);
    }

    public void inALambdaExp(ALambdaExp node)
    {
        defaultIn(node);
    }

    public void outALambdaExp(ALambdaExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALambdaExp(ALambdaExp node)
    {
        inALambdaExp(node);
        if(node.getFuncLambda() != null)
        {
            node.getFuncLambda().apply(this);
        }
        outALambdaExp(node);
    }

    public void inABlockBlockExp(ABlockBlockExp node)
    {
        defaultIn(node);
    }

    public void outABlockBlockExp(ABlockBlockExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlockBlockExp(ABlockBlockExp node)
    {
        inABlockBlockExp(node);
        if(node.getRParen() != null)
        {
            node.getRParen().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        {
            List<PDeclConst> copy = new ArrayList<PDeclConst>(node.getDeclConst());
            Collections.reverse(copy);
            for(PDeclConst e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getLParen() != null)
        {
            node.getLParen().apply(this);
        }
        outABlockBlockExp(node);
    }

    public void inADeclConst(ADeclConst node)
    {
        defaultIn(node);
    }

    public void outADeclConst(ADeclConst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclConst(ADeclConst node)
    {
        inADeclConst(node);
        if(node.getRp1() != null)
        {
            node.getRp1().apply(this);
        }
        if(node.getRp2() != null)
        {
            node.getRp2().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getLp2() != null)
        {
            node.getLp2().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getKwConst() != null)
        {
            node.getKwConst().apply(this);
        }
        if(node.getLp1() != null)
        {
            node.getLp1().apply(this);
        }
        outADeclConst(node);
    }

    public void inAFuncCall(AFuncCall node)
    {
        defaultIn(node);
    }

    public void outAFuncCall(AFuncCall node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFuncCall(AFuncCall node)
    {
        inAFuncCall(node);
        if(node.getRParen() != null)
        {
            node.getRParen().apply(this);
        }
        if(node.getListExp() != null)
        {
            node.getListExp().apply(this);
        }
        if(node.getLParen() != null)
        {
            node.getLParen().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAFuncCall(node);
    }

    public void inAFuncLambda(AFuncLambda node)
    {
        defaultIn(node);
    }

    public void outAFuncLambda(AFuncLambda node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFuncLambda(AFuncLambda node)
    {
        inAFuncLambda(node);
        if(node.getRp1() != null)
        {
            node.getRp1().apply(this);
        }
        if(node.getRBrack() != null)
        {
            node.getRBrack().apply(this);
        }
        if(node.getListExp() != null)
        {
            node.getListExp().apply(this);
        }
        if(node.getLBrack() != null)
        {
            node.getLBrack().apply(this);
        }
        if(node.getRp3() != null)
        {
            node.getRp3().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getLp3() != null)
        {
            node.getLp3().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getRp2() != null)
        {
            node.getRp2().apply(this);
        }
        if(node.getListIds() != null)
        {
            node.getListIds().apply(this);
        }
        if(node.getLp2() != null)
        {
            node.getLp2().apply(this);
        }
        if(node.getKwLambda() != null)
        {
            node.getKwLambda().apply(this);
        }
        if(node.getLp1() != null)
        {
            node.getLp1().apply(this);
        }
        outAFuncLambda(node);
    }

    public void inAListIds(AListIds node)
    {
        defaultIn(node);
    }

    public void outAListIds(AListIds node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListIds(AListIds node)
    {
        inAListIds(node);
        outAListIds(node);
    }

    public void inASingleListIds(ASingleListIds node)
    {
        defaultIn(node);
    }

    public void outASingleListIds(ASingleListIds node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASingleListIds(ASingleListIds node)
    {
        inASingleListIds(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outASingleListIds(node);
    }

    public void inAMultipleListIds(AMultipleListIds node)
    {
        defaultIn(node);
    }

    public void outAMultipleListIds(AMultipleListIds node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultipleListIds(AMultipleListIds node)
    {
        inAMultipleListIds(node);
        if(node.getListIds() != null)
        {
            node.getListIds().apply(this);
        }
        if(node.getPipe() != null)
        {
            node.getPipe().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAMultipleListIds(node);
    }

    public void inAListExp(AListExp node)
    {
        defaultIn(node);
    }

    public void outAListExp(AListExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListExp(AListExp node)
    {
        inAListExp(node);
        outAListExp(node);
    }

    public void inASingleListExp(ASingleListExp node)
    {
        defaultIn(node);
    }

    public void outASingleListExp(ASingleListExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASingleListExp(ASingleListExp node)
    {
        inASingleListExp(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outASingleListExp(node);
    }

    public void inAMultipleListExp(AMultipleListExp node)
    {
        defaultIn(node);
    }

    public void outAMultipleListExp(AMultipleListExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultipleListExp(AMultipleListExp node)
    {
        inAMultipleListExp(node);
        if(node.getListExp() != null)
        {
            node.getListExp().apply(this);
        }
        if(node.getPipe() != null)
        {
            node.getPipe().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAMultipleListExp(node);
    }
}
