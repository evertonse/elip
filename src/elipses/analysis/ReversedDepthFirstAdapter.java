/* This file was generated by SableCC (http://www.sablecc.org/). */

package elipses.analysis;

import java.util.*;
import elipses.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPProgram().apply(this);
        outStart(node);
    }

    public void inAProgram(AProgram node)
    {
        defaultIn(node);
    }

    public void outAProgram(AProgram node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProgram(AProgram node)
    {
        inAProgram(node);
        {
            List<PDeclFunc> copy = new ArrayList<PDeclFunc>(node.getDeclFunc());
            Collections.reverse(copy);
            for(PDeclFunc e : copy)
            {
                e.apply(this);
            }
        }
        outAProgram(node);
    }

    public void inADeclFunc(ADeclFunc node)
    {
        defaultIn(node);
    }

    public void outADeclFunc(ADeclFunc node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclFunc(ADeclFunc node)
    {
        inADeclFunc(node);
        if(node.getRp1() != null)
        {
            node.getRp1().apply(this);
        }
        if(node.getRp3() != null)
        {
            node.getRp3().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getLp3() != null)
        {
            node.getLp3().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getRp2() != null)
        {
            node.getRp2().apply(this);
        }
        if(node.getParams() != null)
        {
            node.getParams().apply(this);
        }
        if(node.getLp2() != null)
        {
            node.getLp2().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getLp1() != null)
        {
            node.getLp1().apply(this);
        }
        if(node.getKwEntry() != null)
        {
            node.getKwEntry().apply(this);
        }
        outADeclFunc(node);
    }

    public void inAIntType(AIntType node)
    {
        defaultIn(node);
    }

    public void outAIntType(AIntType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntType(AIntType node)
    {
        inAIntType(node);
        if(node.getKwInteger() != null)
        {
            node.getKwInteger().apply(this);
        }
        outAIntType(node);
    }

    public void inABoolType(ABoolType node)
    {
        defaultIn(node);
    }

    public void outABoolType(ABoolType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABoolType(ABoolType node)
    {
        inABoolType(node);
        if(node.getKwBool() != null)
        {
            node.getKwBool().apply(this);
        }
        outABoolType(node);
    }

    public void inARealType(ARealType node)
    {
        defaultIn(node);
    }

    public void outARealType(ARealType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARealType(ARealType node)
    {
        inARealType(node);
        if(node.getKwReal() != null)
        {
            node.getKwReal().apply(this);
        }
        outARealType(node);
    }

    public void inAParams(AParams node)
    {
        defaultIn(node);
    }

    public void outAParams(AParams node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParams(AParams node)
    {
        inAParams(node);
        outAParams(node);
    }

    public void inASingleParams(ASingleParams node)
    {
        defaultIn(node);
    }

    public void outASingleParams(ASingleParams node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASingleParams(ASingleParams node)
    {
        inASingleParams(node);
        if(node.getParam() != null)
        {
            node.getParam().apply(this);
        }
        outASingleParams(node);
    }

    public void inAMultipleParams(AMultipleParams node)
    {
        defaultIn(node);
    }

    public void outAMultipleParams(AMultipleParams node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultipleParams(AMultipleParams node)
    {
        inAMultipleParams(node);
        if(node.getParams() != null)
        {
            node.getParams().apply(this);
        }
        if(node.getPipe() != null)
        {
            node.getPipe().apply(this);
        }
        if(node.getParam() != null)
        {
            node.getParam().apply(this);
        }
        outAMultipleParams(node);
    }

    public void inATypeParam(ATypeParam node)
    {
        defaultIn(node);
    }

    public void outATypeParam(ATypeParam node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATypeParam(ATypeParam node)
    {
        inATypeParam(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        outATypeParam(node);
    }

    public void inASignatureParam(ASignatureParam node)
    {
        defaultIn(node);
    }

    public void outASignatureParam(ASignatureParam node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASignatureParam(ASignatureParam node)
    {
        inASignatureParam(node);
        if(node.getSignature() != null)
        {
            node.getSignature().apply(this);
        }
        outASignatureParam(node);
    }

    public void inASignature(ASignature node)
    {
        defaultIn(node);
    }

    public void outASignature(ASignature node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASignature(ASignature node)
    {
        inASignature(node);
        if(node.getRParen() != null)
        {
            node.getRParen().apply(this);
        }
        if(node.getSignatureParams() != null)
        {
            node.getSignatureParams().apply(this);
        }
        if(node.getLParen() != null)
        {
            node.getLParen().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        outASignature(node);
    }

    public void inASignatureParams(ASignatureParams node)
    {
        defaultIn(node);
    }

    public void outASignatureParams(ASignatureParams node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASignatureParams(ASignatureParams node)
    {
        inASignatureParams(node);
        outASignatureParams(node);
    }

    public void inASingleSignatureParams(ASingleSignatureParams node)
    {
        defaultIn(node);
    }

    public void outASingleSignatureParams(ASingleSignatureParams node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASingleSignatureParams(ASingleSignatureParams node)
    {
        inASingleSignatureParams(node);
        if(node.getSignatureParam() != null)
        {
            node.getSignatureParam().apply(this);
        }
        outASingleSignatureParams(node);
    }

    public void inAMultipleSignatureParams(AMultipleSignatureParams node)
    {
        defaultIn(node);
    }

    public void outAMultipleSignatureParams(AMultipleSignatureParams node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultipleSignatureParams(AMultipleSignatureParams node)
    {
        inAMultipleSignatureParams(node);
        if(node.getSignatureParams() != null)
        {
            node.getSignatureParams().apply(this);
        }
        if(node.getPipe() != null)
        {
            node.getPipe().apply(this);
        }
        if(node.getSignatureParam() != null)
        {
            node.getSignatureParam().apply(this);
        }
        outAMultipleSignatureParams(node);
    }

    public void inATypeSignatureParam(ATypeSignatureParam node)
    {
        defaultIn(node);
    }

    public void outATypeSignatureParam(ATypeSignatureParam node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATypeSignatureParam(ATypeSignatureParam node)
    {
        inATypeSignatureParam(node);
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        outATypeSignatureParam(node);
    }

    public void inASignatureSignatureParam(ASignatureSignatureParam node)
    {
        defaultIn(node);
    }

    public void outASignatureSignatureParam(ASignatureSignatureParam node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASignatureSignatureParam(ASignatureSignatureParam node)
    {
        inASignatureSignatureParam(node);
        if(node.getSignature() != null)
        {
            node.getSignature().apply(this);
        }
        outASignatureSignatureParam(node);
    }

    public void inAExp(AExp node)
    {
        defaultIn(node);
    }

    public void outAExp(AExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExp(AExp node)
    {
        inAExp(node);
        if(node.getExpTernary() != null)
        {
            node.getExpTernary().apply(this);
        }
        outAExp(node);
    }

    public void inAExpTernary(AExpTernary node)
    {
        defaultIn(node);
    }

    public void outAExpTernary(AExpTernary node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpTernary(AExpTernary node)
    {
        inAExpTernary(node);
        if(node.getExpOr() != null)
        {
            node.getExpOr().apply(this);
        }
        outAExpTernary(node);
    }

    public void inAIfExpTernary(AIfExpTernary node)
    {
        defaultIn(node);
    }

    public void outAIfExpTernary(AIfExpTernary node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfExpTernary(AIfExpTernary node)
    {
        inAIfExpTernary(node);
        if(node.getFalsy() != null)
        {
            node.getFalsy().apply(this);
        }
        if(node.getKwElse() != null)
        {
            node.getKwElse().apply(this);
        }
        if(node.getTruthy() != null)
        {
            node.getTruthy().apply(this);
        }
        if(node.getKwThen() != null)
        {
            node.getKwThen().apply(this);
        }
        if(node.getRParen() != null)
        {
            node.getRParen().apply(this);
        }
        if(node.getCond() != null)
        {
            node.getCond().apply(this);
        }
        if(node.getLParen() != null)
        {
            node.getLParen().apply(this);
        }
        if(node.getKwIf() != null)
        {
            node.getKwIf().apply(this);
        }
        outAIfExpTernary(node);
    }

    public void inAExpOr(AExpOr node)
    {
        defaultIn(node);
    }

    public void outAExpOr(AExpOr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpOr(AExpOr node)
    {
        inAExpOr(node);
        if(node.getExpAnd() != null)
        {
            node.getExpAnd().apply(this);
        }
        outAExpOr(node);
    }

    public void inAOrExpOr(AOrExpOr node)
    {
        defaultIn(node);
    }

    public void outAOrExpOr(AOrExpOr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOrExpOr(AOrExpOr node)
    {
        inAOrExpOr(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getKwOr() != null)
        {
            node.getKwOr().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAOrExpOr(node);
    }

    public void inAExpAnd(AExpAnd node)
    {
        defaultIn(node);
    }

    public void outAExpAnd(AExpAnd node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpAnd(AExpAnd node)
    {
        inAExpAnd(node);
        if(node.getExpEquality() != null)
        {
            node.getExpEquality().apply(this);
        }
        outAExpAnd(node);
    }

    public void inAAndExpAnd(AAndExpAnd node)
    {
        defaultIn(node);
    }

    public void outAAndExpAnd(AAndExpAnd node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAndExpAnd(AAndExpAnd node)
    {
        inAAndExpAnd(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getKwAnd() != null)
        {
            node.getKwAnd().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAAndExpAnd(node);
    }

    public void inAExpEquality(AExpEquality node)
    {
        defaultIn(node);
    }

    public void outAExpEquality(AExpEquality node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpEquality(AExpEquality node)
    {
        inAExpEquality(node);
        if(node.getExpRelational() != null)
        {
            node.getExpRelational().apply(this);
        }
        outAExpEquality(node);
    }

    public void inAEqExpEquality(AEqExpEquality node)
    {
        defaultIn(node);
    }

    public void outAEqExpEquality(AEqExpEquality node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEqExpEquality(AEqExpEquality node)
    {
        inAEqExpEquality(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getEq() != null)
        {
            node.getEq().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAEqExpEquality(node);
    }

    public void inAExpRelational(AExpRelational node)
    {
        defaultIn(node);
    }

    public void outAExpRelational(AExpRelational node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpRelational(AExpRelational node)
    {
        inAExpRelational(node);
        if(node.getExpAdditive() != null)
        {
            node.getExpAdditive().apply(this);
        }
        outAExpRelational(node);
    }

    public void inALtExpRelational(ALtExpRelational node)
    {
        defaultIn(node);
    }

    public void outALtExpRelational(ALtExpRelational node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALtExpRelational(ALtExpRelational node)
    {
        inALtExpRelational(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getLt() != null)
        {
            node.getLt().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outALtExpRelational(node);
    }

    public void inAGtExpRelational(AGtExpRelational node)
    {
        defaultIn(node);
    }

    public void outAGtExpRelational(AGtExpRelational node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGtExpRelational(AGtExpRelational node)
    {
        inAGtExpRelational(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getGt() != null)
        {
            node.getGt().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAGtExpRelational(node);
    }

    public void inAExpAdditive(AExpAdditive node)
    {
        defaultIn(node);
    }

    public void outAExpAdditive(AExpAdditive node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpAdditive(AExpAdditive node)
    {
        inAExpAdditive(node);
        if(node.getExpMultiplicative() != null)
        {
            node.getExpMultiplicative().apply(this);
        }
        outAExpAdditive(node);
    }

    public void inAPlusExpAdditive(APlusExpAdditive node)
    {
        defaultIn(node);
    }

    public void outAPlusExpAdditive(APlusExpAdditive node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPlusExpAdditive(APlusExpAdditive node)
    {
        inAPlusExpAdditive(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAPlusExpAdditive(node);
    }

    public void inAMinusExpAdditive(AMinusExpAdditive node)
    {
        defaultIn(node);
    }

    public void outAMinusExpAdditive(AMinusExpAdditive node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinusExpAdditive(AMinusExpAdditive node)
    {
        inAMinusExpAdditive(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAMinusExpAdditive(node);
    }

    public void inAExpMultiplicative(AExpMultiplicative node)
    {
        defaultIn(node);
    }

    public void outAExpMultiplicative(AExpMultiplicative node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpMultiplicative(AExpMultiplicative node)
    {
        inAExpMultiplicative(node);
        if(node.getExpAtomic() != null)
        {
            node.getExpAtomic().apply(this);
        }
        outAExpMultiplicative(node);
    }

    public void inAMultExpMultiplicative(AMultExpMultiplicative node)
    {
        defaultIn(node);
    }

    public void outAMultExpMultiplicative(AMultExpMultiplicative node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultExpMultiplicative(AMultExpMultiplicative node)
    {
        inAMultExpMultiplicative(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getMult() != null)
        {
            node.getMult().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAMultExpMultiplicative(node);
    }

    public void inADivExpMultiplicative(ADivExpMultiplicative node)
    {
        defaultIn(node);
    }

    public void outADivExpMultiplicative(ADivExpMultiplicative node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivExpMultiplicative(ADivExpMultiplicative node)
    {
        inADivExpMultiplicative(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getDiv() != null)
        {
            node.getDiv().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outADivExpMultiplicative(node);
    }

    public void inAModExpMultiplicative(AModExpMultiplicative node)
    {
        defaultIn(node);
    }

    public void outAModExpMultiplicative(AModExpMultiplicative node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAModExpMultiplicative(AModExpMultiplicative node)
    {
        inAModExpMultiplicative(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getMod() != null)
        {
            node.getMod().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAModExpMultiplicative(node);
    }

    public void inANegativeExpMultiplicative(ANegativeExpMultiplicative node)
    {
        defaultIn(node);
    }

    public void outANegativeExpMultiplicative(ANegativeExpMultiplicative node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANegativeExpMultiplicative(ANegativeExpMultiplicative node)
    {
        inANegativeExpMultiplicative(node);
        if(node.getExpAtomic() != null)
        {
            node.getExpAtomic().apply(this);
        }
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        outANegativeExpMultiplicative(node);
    }

    public void inANotExpMultiplicative(ANotExpMultiplicative node)
    {
        defaultIn(node);
    }

    public void outANotExpMultiplicative(ANotExpMultiplicative node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANotExpMultiplicative(ANotExpMultiplicative node)
    {
        inANotExpMultiplicative(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getKwNot() != null)
        {
            node.getKwNot().apply(this);
        }
        outANotExpMultiplicative(node);
    }

    public void inAIdExpAtomic(AIdExpAtomic node)
    {
        defaultIn(node);
    }

    public void outAIdExpAtomic(AIdExpAtomic node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdExpAtomic(AIdExpAtomic node)
    {
        inAIdExpAtomic(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAIdExpAtomic(node);
    }

    public void inABinExpAtomic(ABinExpAtomic node)
    {
        defaultIn(node);
    }

    public void outABinExpAtomic(ABinExpAtomic node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABinExpAtomic(ABinExpAtomic node)
    {
        inABinExpAtomic(node);
        if(node.getNumberBin() != null)
        {
            node.getNumberBin().apply(this);
        }
        outABinExpAtomic(node);
    }

    public void inAFracExpAtomic(AFracExpAtomic node)
    {
        defaultIn(node);
    }

    public void outAFracExpAtomic(AFracExpAtomic node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFracExpAtomic(AFracExpAtomic node)
    {
        inAFracExpAtomic(node);
        if(node.getNumberFrac() != null)
        {
            node.getNumberFrac().apply(this);
        }
        outAFracExpAtomic(node);
    }

    public void inAIntExpAtomic(AIntExpAtomic node)
    {
        defaultIn(node);
    }

    public void outAIntExpAtomic(AIntExpAtomic node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntExpAtomic(AIntExpAtomic node)
    {
        inAIntExpAtomic(node);
        if(node.getNumberInt() != null)
        {
            node.getNumberInt().apply(this);
        }
        outAIntExpAtomic(node);
    }

    public void inATrueExpAtomic(ATrueExpAtomic node)
    {
        defaultIn(node);
    }

    public void outATrueExpAtomic(ATrueExpAtomic node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATrueExpAtomic(ATrueExpAtomic node)
    {
        inATrueExpAtomic(node);
        if(node.getKwTrue() != null)
        {
            node.getKwTrue().apply(this);
        }
        outATrueExpAtomic(node);
    }

    public void inAFalseExpAtomic(AFalseExpAtomic node)
    {
        defaultIn(node);
    }

    public void outAFalseExpAtomic(AFalseExpAtomic node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFalseExpAtomic(AFalseExpAtomic node)
    {
        inAFalseExpAtomic(node);
        if(node.getKwFalse() != null)
        {
            node.getKwFalse().apply(this);
        }
        outAFalseExpAtomic(node);
    }

    public void inABlockExpAtomic(ABlockExpAtomic node)
    {
        defaultIn(node);
    }

    public void outABlockExpAtomic(ABlockExpAtomic node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlockExpAtomic(ABlockExpAtomic node)
    {
        inABlockExpAtomic(node);
        if(node.getBlockExp() != null)
        {
            node.getBlockExp().apply(this);
        }
        outABlockExpAtomic(node);
    }

    public void inACallExpAtomic(ACallExpAtomic node)
    {
        defaultIn(node);
    }

    public void outACallExpAtomic(ACallExpAtomic node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACallExpAtomic(ACallExpAtomic node)
    {
        inACallExpAtomic(node);
        if(node.getFuncCall() != null)
        {
            node.getFuncCall().apply(this);
        }
        outACallExpAtomic(node);
    }

    public void inALambdaExpAtomic(ALambdaExpAtomic node)
    {
        defaultIn(node);
    }

    public void outALambdaExpAtomic(ALambdaExpAtomic node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALambdaExpAtomic(ALambdaExpAtomic node)
    {
        inALambdaExpAtomic(node);
        if(node.getFuncLambda() != null)
        {
            node.getFuncLambda().apply(this);
        }
        outALambdaExpAtomic(node);
    }

    public void inABlockBlockExp(ABlockBlockExp node)
    {
        defaultIn(node);
    }

    public void outABlockBlockExp(ABlockBlockExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlockBlockExp(ABlockBlockExp node)
    {
        inABlockBlockExp(node);
        if(node.getRParen() != null)
        {
            node.getRParen().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        {
            List<PDeclConst> copy = new ArrayList<PDeclConst>(node.getDeclConst());
            Collections.reverse(copy);
            for(PDeclConst e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getLParen() != null)
        {
            node.getLParen().apply(this);
        }
        outABlockBlockExp(node);
    }

    public void inADeclConst(ADeclConst node)
    {
        defaultIn(node);
    }

    public void outADeclConst(ADeclConst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclConst(ADeclConst node)
    {
        inADeclConst(node);
        if(node.getRp1() != null)
        {
            node.getRp1().apply(this);
        }
        if(node.getRp2() != null)
        {
            node.getRp2().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getLp2() != null)
        {
            node.getLp2().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getKwConst() != null)
        {
            node.getKwConst().apply(this);
        }
        if(node.getLp1() != null)
        {
            node.getLp1().apply(this);
        }
        outADeclConst(node);
    }

    public void inAFuncCall(AFuncCall node)
    {
        defaultIn(node);
    }

    public void outAFuncCall(AFuncCall node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFuncCall(AFuncCall node)
    {
        inAFuncCall(node);
        if(node.getRParen() != null)
        {
            node.getRParen().apply(this);
        }
        if(node.getListExp() != null)
        {
            node.getListExp().apply(this);
        }
        if(node.getLParen() != null)
        {
            node.getLParen().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAFuncCall(node);
    }

    public void inAFuncLambda(AFuncLambda node)
    {
        defaultIn(node);
    }

    public void outAFuncLambda(AFuncLambda node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFuncLambda(AFuncLambda node)
    {
        inAFuncLambda(node);
        if(node.getRp1() != null)
        {
            node.getRp1().apply(this);
        }
        if(node.getRBrack() != null)
        {
            node.getRBrack().apply(this);
        }
        if(node.getListExp() != null)
        {
            node.getListExp().apply(this);
        }
        if(node.getLBrack() != null)
        {
            node.getLBrack().apply(this);
        }
        if(node.getRp3() != null)
        {
            node.getRp3().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getLp3() != null)
        {
            node.getLp3().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getRp2() != null)
        {
            node.getRp2().apply(this);
        }
        if(node.getListIds() != null)
        {
            node.getListIds().apply(this);
        }
        if(node.getLp2() != null)
        {
            node.getLp2().apply(this);
        }
        if(node.getKwLambda() != null)
        {
            node.getKwLambda().apply(this);
        }
        if(node.getLp1() != null)
        {
            node.getLp1().apply(this);
        }
        outAFuncLambda(node);
    }

    public void inAListIds(AListIds node)
    {
        defaultIn(node);
    }

    public void outAListIds(AListIds node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListIds(AListIds node)
    {
        inAListIds(node);
        outAListIds(node);
    }

    public void inASingleListIds(ASingleListIds node)
    {
        defaultIn(node);
    }

    public void outASingleListIds(ASingleListIds node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASingleListIds(ASingleListIds node)
    {
        inASingleListIds(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outASingleListIds(node);
    }

    public void inAMultipleListIds(AMultipleListIds node)
    {
        defaultIn(node);
    }

    public void outAMultipleListIds(AMultipleListIds node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultipleListIds(AMultipleListIds node)
    {
        inAMultipleListIds(node);
        if(node.getListIds() != null)
        {
            node.getListIds().apply(this);
        }
        if(node.getPipe() != null)
        {
            node.getPipe().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAMultipleListIds(node);
    }

    public void inAListExp(AListExp node)
    {
        defaultIn(node);
    }

    public void outAListExp(AListExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListExp(AListExp node)
    {
        inAListExp(node);
        outAListExp(node);
    }

    public void inASingleListExp(ASingleListExp node)
    {
        defaultIn(node);
    }

    public void outASingleListExp(ASingleListExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASingleListExp(ASingleListExp node)
    {
        inASingleListExp(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outASingleListExp(node);
    }

    public void inAMultipleListExp(AMultipleListExp node)
    {
        defaultIn(node);
    }

    public void outAMultipleListExp(AMultipleListExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultipleListExp(AMultipleListExp node)
    {
        inAMultipleListExp(node);
        if(node.getListExp() != null)
        {
            node.getListExp().apply(this);
        }
        if(node.getPipe() != null)
        {
            node.getPipe().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAMultipleListExp(node);
    }
}
