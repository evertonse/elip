/* This file was generated by SableCC (http://www.sablecc.org/). */

package elipses.analysis;

import java.util.*;
import elipses.node.*;

public class AnalysisAdapter implements Analysis
{
    private Hashtable<Node,Object> in;
    private Hashtable<Node,Object> out;

    @Override
    public Object getIn(Node node)
    {
        if(this.in == null)
        {
            return null;
        }

        return this.in.get(node);
    }

    @Override
    public void setIn(Node node, Object o)
    {
        if(this.in == null)
        {
            this.in = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.in.put(node, o);
        }
        else
        {
            this.in.remove(node);
        }
    }

    @Override
    public Object getOut(Node node)
    {
        if(this.out == null)
        {
            return null;
        }

        return this.out.get(node);
    }

    @Override
    public void setOut(Node node, Object o)
    {
        if(this.out == null)
        {
            this.out = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.out.put(node, o);
        }
        else
        {
            this.out.remove(node);
        }
    }

    @Override
    public void caseStart(Start node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAProgram(AProgram node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADeclFunc(ADeclFunc node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIntType(AIntType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABoolType(ABoolType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseARealType(ARealType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAParams(AParams node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASingleParams(ASingleParams node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMultipleParams(AMultipleParams node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATypeParam(ATypeParam node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASignatureParam(ASignatureParam node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASignature(ASignature node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASignatureParams(ASignatureParams node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASingleSignatureParams(ASingleSignatureParams node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMultipleSignatureParams(AMultipleSignatureParams node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATypeSignatureParam(ATypeSignatureParam node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASignatureSignatureParam(ASignatureSignatureParam node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExp(AExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIfExp(AIfExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExp6(AExp6 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAOrExp6(AOrExp6 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExp5(AExp5 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAndExp5(AAndExp5 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExp4(AExp4 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEqExp4(AEqExp4 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExp3(AExp3 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALtExp3(ALtExp3 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAGtExp3(AGtExp3 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExp2(AExp2 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPlusExp2(APlusExp2 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMinusExp2(AMinusExp2 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExp1(AExp1 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMultExp1(AMultExp1 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADivExp1(ADivExp1 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAModExp1(AModExp1 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANegativeExp1(ANegativeExp1 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANotExp1(ANotExp1 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIdExp0(AIdExp0 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABinExp0(ABinExp0 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFracExp0(AFracExp0 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIntExp0(AIntExp0 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATrueExp0(ATrueExp0 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFalseExp0(AFalseExp0 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABlockExp0(ABlockExp0 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACallExp0(ACallExp0 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALambdaExp0(ALambdaExp0 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABlockBlockExp(ABlockBlockExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADeclConst(ADeclConst node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFuncCall(AFuncCall node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFuncLambda(AFuncLambda node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAListIds(AListIds node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASingleListIds(ASingleListIds node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMultipleListIds(AMultipleListIds node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAListExp(AListExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASingleListExp(ASingleListExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMultipleListExp(AMultipleListExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBlank(TBlank node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTComment(TComment node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTKwConst(TKwConst node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTKwInterger(TKwInterger node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTKwReal(TKwReal node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTKwBool(TKwBool node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTKwTrue(TKwTrue node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTKwFalse(TKwFalse node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTKwEntry(TKwEntry node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTKwIf(TKwIf node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTKwThen(TKwThen node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTKwElse(TKwElse node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTKwAnd(TKwAnd node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTKwNot(TKwNot node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTKwOr(TKwOr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTKwLambda(TKwLambda node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPlus(TPlus node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMinus(TMinus node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMult(TMult node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDiv(TDiv node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMod(TMod node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLParen(TLParen node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRParen(TRParen node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLBrack(TLBrack node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRBrack(TRBrack node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPipe(TPipe node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTColon(TColon node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEq(TEq node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLt(TLt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTGt(TGt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIdentifier(TIdentifier node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNumberInt(TNumberInt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNumberFrac(TNumberFrac node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNumberBin(TNumberBin node)
    {
        defaultCase(node);
    }

    @Override
    public void caseEOF(EOF node)
    {
        defaultCase(node);
    }

    @Override
    public void caseInvalidToken(InvalidToken node)
    {
        defaultCase(node);
    }

    public void defaultCase(@SuppressWarnings("unused") Node node)
    {
        // do nothing
    }
}
