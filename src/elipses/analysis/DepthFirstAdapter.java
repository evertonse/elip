/* This file was generated by SableCC (http://www.sablecc.org/). */

package elipses.analysis;

import java.util.*;
import elipses.node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getPExp().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inABinExp(ABinExp node)
    {
        defaultIn(node);
    }

    public void outABinExp(ABinExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABinExp(ABinExp node)
    {
        inABinExp(node);
        if(node.getNumberBin() != null)
        {
            node.getNumberBin().apply(this);
        }
        outABinExp(node);
    }

    public void inAFracExp(AFracExp node)
    {
        defaultIn(node);
    }

    public void outAFracExp(AFracExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFracExp(AFracExp node)
    {
        inAFracExp(node);
        if(node.getNumberFrac() != null)
        {
            node.getNumberFrac().apply(this);
        }
        outAFracExp(node);
    }

    public void inAIntExp(AIntExp node)
    {
        defaultIn(node);
    }

    public void outAIntExp(AIntExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntExp(AIntExp node)
    {
        inAIntExp(node);
        if(node.getNumberInt() != null)
        {
            node.getNumberInt().apply(this);
        }
        outAIntExp(node);
    }

    public void inATrueExp(ATrueExp node)
    {
        defaultIn(node);
    }

    public void outATrueExp(ATrueExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATrueExp(ATrueExp node)
    {
        inATrueExp(node);
        if(node.getKwTrue() != null)
        {
            node.getKwTrue().apply(this);
        }
        outATrueExp(node);
    }

    public void inAFalseExp(AFalseExp node)
    {
        defaultIn(node);
    }

    public void outAFalseExp(AFalseExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFalseExp(AFalseExp node)
    {
        inAFalseExp(node);
        if(node.getKwFalse() != null)
        {
            node.getKwFalse().apply(this);
        }
        outAFalseExp(node);
    }

    public void inANegativeExp(ANegativeExp node)
    {
        defaultIn(node);
    }

    public void outANegativeExp(ANegativeExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANegativeExp(ANegativeExp node)
    {
        inANegativeExp(node);
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outANegativeExp(node);
    }
}
