/* This file was generated by SableCC (http://www.sablecc.org/). */

package elipses.node;

import elipses.analysis.*;

@SuppressWarnings("nls")
public final class AMultipleListExp extends PListExp
{
    private PExp _exp_;
    private TPipe _pipe_;
    private PListExp _listExp_;

    public AMultipleListExp()
    {
        // Constructor
    }

    public AMultipleListExp(
        @SuppressWarnings("hiding") PExp _exp_,
        @SuppressWarnings("hiding") TPipe _pipe_,
        @SuppressWarnings("hiding") PListExp _listExp_)
    {
        // Constructor
        setExp(_exp_);

        setPipe(_pipe_);

        setListExp(_listExp_);

    }

    @Override
    public Object clone()
    {
        return new AMultipleListExp(
            cloneNode(this._exp_),
            cloneNode(this._pipe_),
            cloneNode(this._listExp_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAMultipleListExp(this);
    }

    public PExp getExp()
    {
        return this._exp_;
    }

    public void setExp(PExp node)
    {
        if(this._exp_ != null)
        {
            this._exp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._exp_ = node;
    }

    public TPipe getPipe()
    {
        return this._pipe_;
    }

    public void setPipe(TPipe node)
    {
        if(this._pipe_ != null)
        {
            this._pipe_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._pipe_ = node;
    }

    public PListExp getListExp()
    {
        return this._listExp_;
    }

    public void setListExp(PListExp node)
    {
        if(this._listExp_ != null)
        {
            this._listExp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._listExp_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._exp_)
            + toString(this._pipe_)
            + toString(this._listExp_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._exp_ == child)
        {
            this._exp_ = null;
            return;
        }

        if(this._pipe_ == child)
        {
            this._pipe_ = null;
            return;
        }

        if(this._listExp_ == child)
        {
            this._listExp_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._exp_ == oldChild)
        {
            setExp((PExp) newChild);
            return;
        }

        if(this._pipe_ == oldChild)
        {
            setPipe((TPipe) newChild);
            return;
        }

        if(this._listExp_ == oldChild)
        {
            setListExp((PListExp) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
