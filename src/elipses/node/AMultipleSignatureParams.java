/* This file was generated by SableCC (http://www.sablecc.org/). */

package elipses.node;

import elipses.analysis.*;

@SuppressWarnings("nls")
public final class AMultipleSignatureParams extends PSignatureParams
{
    private PSignatureParam _signatureParam_;
    private TPipe _pipe_;
    private PSignatureParams _signatureParams_;

    public AMultipleSignatureParams()
    {
        // Constructor
    }

    public AMultipleSignatureParams(
        @SuppressWarnings("hiding") PSignatureParam _signatureParam_,
        @SuppressWarnings("hiding") TPipe _pipe_,
        @SuppressWarnings("hiding") PSignatureParams _signatureParams_)
    {
        // Constructor
        setSignatureParam(_signatureParam_);

        setPipe(_pipe_);

        setSignatureParams(_signatureParams_);

    }

    @Override
    public Object clone()
    {
        return new AMultipleSignatureParams(
            cloneNode(this._signatureParam_),
            cloneNode(this._pipe_),
            cloneNode(this._signatureParams_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAMultipleSignatureParams(this);
    }

    public PSignatureParam getSignatureParam()
    {
        return this._signatureParam_;
    }

    public void setSignatureParam(PSignatureParam node)
    {
        if(this._signatureParam_ != null)
        {
            this._signatureParam_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._signatureParam_ = node;
    }

    public TPipe getPipe()
    {
        return this._pipe_;
    }

    public void setPipe(TPipe node)
    {
        if(this._pipe_ != null)
        {
            this._pipe_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._pipe_ = node;
    }

    public PSignatureParams getSignatureParams()
    {
        return this._signatureParams_;
    }

    public void setSignatureParams(PSignatureParams node)
    {
        if(this._signatureParams_ != null)
        {
            this._signatureParams_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._signatureParams_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._signatureParam_)
            + toString(this._pipe_)
            + toString(this._signatureParams_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._signatureParam_ == child)
        {
            this._signatureParam_ = null;
            return;
        }

        if(this._pipe_ == child)
        {
            this._pipe_ = null;
            return;
        }

        if(this._signatureParams_ == child)
        {
            this._signatureParams_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._signatureParam_ == oldChild)
        {
            setSignatureParam((PSignatureParam) newChild);
            return;
        }

        if(this._pipe_ == oldChild)
        {
            setPipe((TPipe) newChild);
            return;
        }

        if(this._signatureParams_ == oldChild)
        {
            setSignatureParams((PSignatureParams) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
