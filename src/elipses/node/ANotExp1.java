/* This file was generated by SableCC (http://www.sablecc.org/). */

package elipses.node;

import elipses.analysis.*;

@SuppressWarnings("nls")
public final class ANotExp1 extends PExp1
{
    private TKwNot _kwNot_;
    private PExp0 _right_;

    public ANotExp1()
    {
        // Constructor
    }

    public ANotExp1(
        @SuppressWarnings("hiding") TKwNot _kwNot_,
        @SuppressWarnings("hiding") PExp0 _right_)
    {
        // Constructor
        setKwNot(_kwNot_);

        setRight(_right_);

    }

    @Override
    public Object clone()
    {
        return new ANotExp1(
            cloneNode(this._kwNot_),
            cloneNode(this._right_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseANotExp1(this);
    }

    public TKwNot getKwNot()
    {
        return this._kwNot_;
    }

    public void setKwNot(TKwNot node)
    {
        if(this._kwNot_ != null)
        {
            this._kwNot_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._kwNot_ = node;
    }

    public PExp0 getRight()
    {
        return this._right_;
    }

    public void setRight(PExp0 node)
    {
        if(this._right_ != null)
        {
            this._right_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._right_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._kwNot_)
            + toString(this._right_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._kwNot_ == child)
        {
            this._kwNot_ = null;
            return;
        }

        if(this._right_ == child)
        {
            this._right_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._kwNot_ == oldChild)
        {
            setKwNot((TKwNot) newChild);
            return;
        }

        if(this._right_ == oldChild)
        {
            setRight((PExp0) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
