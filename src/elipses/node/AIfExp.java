/* This file was generated by SableCC (http://www.sablecc.org/). */

package elipses.node;

import elipses.analysis.*;

@SuppressWarnings("nls")
public final class AIfExp extends PExp
{
    private TKwIf _kwIf_;
    private TLParen _lParen_;
    private PExp _test_;
    private TRParen _rParen_;
    private TKwThen _kwThen_;
    private PExp _if_;
    private TKwElse _kwElse_;
    private PExp _else_;

    public AIfExp()
    {
        // Constructor
    }

    public AIfExp(
        @SuppressWarnings("hiding") TKwIf _kwIf_,
        @SuppressWarnings("hiding") TLParen _lParen_,
        @SuppressWarnings("hiding") PExp _test_,
        @SuppressWarnings("hiding") TRParen _rParen_,
        @SuppressWarnings("hiding") TKwThen _kwThen_,
        @SuppressWarnings("hiding") PExp _if_,
        @SuppressWarnings("hiding") TKwElse _kwElse_,
        @SuppressWarnings("hiding") PExp _else_)
    {
        // Constructor
        setKwIf(_kwIf_);

        setLParen(_lParen_);

        setTest(_test_);

        setRParen(_rParen_);

        setKwThen(_kwThen_);

        setIf(_if_);

        setKwElse(_kwElse_);

        setElse(_else_);

    }

    @Override
    public Object clone()
    {
        return new AIfExp(
            cloneNode(this._kwIf_),
            cloneNode(this._lParen_),
            cloneNode(this._test_),
            cloneNode(this._rParen_),
            cloneNode(this._kwThen_),
            cloneNode(this._if_),
            cloneNode(this._kwElse_),
            cloneNode(this._else_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAIfExp(this);
    }

    public TKwIf getKwIf()
    {
        return this._kwIf_;
    }

    public void setKwIf(TKwIf node)
    {
        if(this._kwIf_ != null)
        {
            this._kwIf_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._kwIf_ = node;
    }

    public TLParen getLParen()
    {
        return this._lParen_;
    }

    public void setLParen(TLParen node)
    {
        if(this._lParen_ != null)
        {
            this._lParen_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lParen_ = node;
    }

    public PExp getTest()
    {
        return this._test_;
    }

    public void setTest(PExp node)
    {
        if(this._test_ != null)
        {
            this._test_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._test_ = node;
    }

    public TRParen getRParen()
    {
        return this._rParen_;
    }

    public void setRParen(TRParen node)
    {
        if(this._rParen_ != null)
        {
            this._rParen_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rParen_ = node;
    }

    public TKwThen getKwThen()
    {
        return this._kwThen_;
    }

    public void setKwThen(TKwThen node)
    {
        if(this._kwThen_ != null)
        {
            this._kwThen_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._kwThen_ = node;
    }

    public PExp getIf()
    {
        return this._if_;
    }

    public void setIf(PExp node)
    {
        if(this._if_ != null)
        {
            this._if_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._if_ = node;
    }

    public TKwElse getKwElse()
    {
        return this._kwElse_;
    }

    public void setKwElse(TKwElse node)
    {
        if(this._kwElse_ != null)
        {
            this._kwElse_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._kwElse_ = node;
    }

    public PExp getElse()
    {
        return this._else_;
    }

    public void setElse(PExp node)
    {
        if(this._else_ != null)
        {
            this._else_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._else_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._kwIf_)
            + toString(this._lParen_)
            + toString(this._test_)
            + toString(this._rParen_)
            + toString(this._kwThen_)
            + toString(this._if_)
            + toString(this._kwElse_)
            + toString(this._else_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._kwIf_ == child)
        {
            this._kwIf_ = null;
            return;
        }

        if(this._lParen_ == child)
        {
            this._lParen_ = null;
            return;
        }

        if(this._test_ == child)
        {
            this._test_ = null;
            return;
        }

        if(this._rParen_ == child)
        {
            this._rParen_ = null;
            return;
        }

        if(this._kwThen_ == child)
        {
            this._kwThen_ = null;
            return;
        }

        if(this._if_ == child)
        {
            this._if_ = null;
            return;
        }

        if(this._kwElse_ == child)
        {
            this._kwElse_ = null;
            return;
        }

        if(this._else_ == child)
        {
            this._else_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._kwIf_ == oldChild)
        {
            setKwIf((TKwIf) newChild);
            return;
        }

        if(this._lParen_ == oldChild)
        {
            setLParen((TLParen) newChild);
            return;
        }

        if(this._test_ == oldChild)
        {
            setTest((PExp) newChild);
            return;
        }

        if(this._rParen_ == oldChild)
        {
            setRParen((TRParen) newChild);
            return;
        }

        if(this._kwThen_ == oldChild)
        {
            setKwThen((TKwThen) newChild);
            return;
        }

        if(this._if_ == oldChild)
        {
            setIf((PExp) newChild);
            return;
        }

        if(this._kwElse_ == oldChild)
        {
            setKwElse((TKwElse) newChild);
            return;
        }

        if(this._else_ == oldChild)
        {
            setElse((PExp) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
