/* This file was generated by SableCC (http://www.sablecc.org/). */

package elipses.node;

import elipses.analysis.*;

@SuppressWarnings("nls")
public final class AMultipleParams extends PParams
{
    private PParam _param_;
    private TPipe _pipe_;
    private PParams _params_;

    public AMultipleParams()
    {
        // Constructor
    }

    public AMultipleParams(
        @SuppressWarnings("hiding") PParam _param_,
        @SuppressWarnings("hiding") TPipe _pipe_,
        @SuppressWarnings("hiding") PParams _params_)
    {
        // Constructor
        setParam(_param_);

        setPipe(_pipe_);

        setParams(_params_);

    }

    @Override
    public Object clone()
    {
        return new AMultipleParams(
            cloneNode(this._param_),
            cloneNode(this._pipe_),
            cloneNode(this._params_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAMultipleParams(this);
    }

    public PParam getParam()
    {
        return this._param_;
    }

    public void setParam(PParam node)
    {
        if(this._param_ != null)
        {
            this._param_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._param_ = node;
    }

    public TPipe getPipe()
    {
        return this._pipe_;
    }

    public void setPipe(TPipe node)
    {
        if(this._pipe_ != null)
        {
            this._pipe_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._pipe_ = node;
    }

    public PParams getParams()
    {
        return this._params_;
    }

    public void setParams(PParams node)
    {
        if(this._params_ != null)
        {
            this._params_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._params_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._param_)
            + toString(this._pipe_)
            + toString(this._params_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._param_ == child)
        {
            this._param_ = null;
            return;
        }

        if(this._pipe_ == child)
        {
            this._pipe_ = null;
            return;
        }

        if(this._params_ == child)
        {
            this._params_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._param_ == oldChild)
        {
            setParam((PParam) newChild);
            return;
        }

        if(this._pipe_ == oldChild)
        {
            setPipe((TPipe) newChild);
            return;
        }

        if(this._params_ == oldChild)
        {
            setParams((PParams) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
