Package elipses;
Helpers
  digit     = ['0' .. '9'];
  bin_digit = ('0' | '1');

  letter    = [['a' .. 'z'] + ['A' .. 'Z']];
  nondigit	=	[ '_' + letter ];

  any = [0x0 .. 0xfffff];
  ascii_char = [32 .. 127] ;

  // empty
  cr = 13 ; // carriage return
  lf = 10 ; // line feed
  tab = 9 ; // tab char
  space = ' ';
  nl = '\n';
  eol = lf | cr | cr lf;
  not_eol = [any - [cr + lf]];
  not_minus = [any - '-'];
  not_minus_not_r_curly = [not_minus - '}'];

  hashtag = '#';

  // Brackets
  comma   = ',';
  l_curly = '{';
  r_curly = '}';  
  l_paren = '(';
  r_paren = ')';
  l_brack = '[';
  r_brack = ']';

  l_curly_double_minus = '{--';
  r_curly_double_minus = '--}';
  
  // Comments
  comment_line  = '#' not_eol* eol;
  comment_line_eof  = '#' not_eol* eol?;
  comment_block = l_curly_double_minus  not_minus* '-'+ (not_minus_not_r_curly not_minus*  '-'+)* '-}';  
 


//+-------------------------------------------------------------+
//| Tokens (Regex) 
//+-------------------------------------------------------------+
 
Tokens
/* These are token definitions. It is allowed to use helper regular *
 * expressions in the body of a token definition.                   *
 * On a given input, the longest valid definition is chosen, In     *
 * case of a match, the definition that appears first is chosen.    *
 * Example: on input -> 's' <- "char" will have precedence on       *
 * "string", because it appears first.                              */
 
  // empty 
  blank	=	( cr | lf | tab | space ) +;
  comment = (comment_line | comment_block | comment_line_eof);


/* keywords */
  // types 
  kw_const = 'const';
  kw_integer = 'inteiro';
  kw_real = 'real';
  kw_bool =  'booleano';

  // type values
  kw_true  =  'verdadeiro';
  kw_false =  'falso';

  // reserved
  kw_entry = 'entrada';
  kw_if   = 'se';
  kw_then = 'entao';
  kw_else = 'senao';

  // Bool operators
  kw_and  = 'e';
  kw_not  = 'nao';
  kw_or   = 'ou';

  kw_lambda = 'lambda';
  
/* punctuators */
  plus    = '+';
  minus   = '-';
  mult    =	'*';
  div     = '/';
  mod     = '%';
  l_paren = '(';
  r_paren = ')';
  l_brack = '[';
  r_brack = ']';
  pipe = '|';
  colon = ':';

  eq	= '=';
  lt	= '<';
  gt	= '>';



  // digits are not allowed in identifier
  // neither can have accents, weird chars and can't be no keyword
	identifier	=	nondigit+;
  

  // arithmetic
  number_int  = digit+;
  number_frac =  digit+ ',' digit+;
  number_bin  = '0b' bin_digit+; 

Ignored Tokens

  comment,
  blank;


//+-------------------------------------------------------------+
//|  Concrete Syntax Tree
//+-------------------------------------------------------------+

Productions

  program {->program} = 
    decl_func*
        {-> New program([decl_func.decl_func])}
  ;

  decl_func {->decl_func} =  
    [entry]:T.kw_entry? 
    [lp1]:T.l_paren   [return_type]:type [id]:T.identifier 
      [lp2]:T.l_paren [pars]:params [rp2]:T.r_paren T.colon 
      [lp3]:T.l_paren [body]:exp    [rp3]:T.r_paren 
    [rp1]:T.r_paren
        {-> New decl_func(entry,return_type,id, [pars.param], body.exp) }
  ;

  type {->type}  =  
    {int} [type]:T.kw_integer 
        {-> New type.int(type)}
    | {bool} [type]:T.kw_bool    
        {-> New type.bool(type)} 
    | {real} [type]:T.kw_real    
        {-> New type.real(type)}
  ;

  params{->param*}  =  
    /*Ɛ*/ {->[]}
    | {single} [par]:param 
        {->[par.param]} 
    | {multiple} [par]:param T.pipe [pars]:params 
        {->[par.param, pars.param]} 
  ;

  param  {->param} =  
    {type} type [id]:T.identifier 
        {->New param.type(type,id)} 
    | {signature} [sig]:signature 
        {->New param.signature(sig.signature)}
  ;

  signature {->signature} =  
    [return_type]:type [id]:T.identifier T.l_paren [pars]:signature_params T.r_paren
        {-> New signature(return_type,id, [pars.signature_param])}
  ;

  signature_params {->signature_param*}  = 
    /*Ɛ*/ {->[]} 
    | {single} signature_param 
        {->[signature_param.signature_param]}  
    | {multiple} signature_param T.pipe signature_params 
        {->[signature_param.signature_param, signature_params.signature_param]} 
  ;

  signature_param {->signature_param} = 
    {type} type 
        {-> New signature_param.type(type.type)} 
    | {signature} signature  
        {->New signature_param.signature(signature.signature)}
  ;

  // @note smaller number means more priority, note that 'mult' is on priority exp1 whereas 'plus' in on exp2
  // which means add has less priority in evaluation, so 'mult' appear closer to the leafs of the AST
  exp  {-> exp} = 
    exp_or  {-> exp_or.exp} 
  ;

  exp_or {-> exp} =
    exp_and {->exp_and.exp}
    | {or} [left]:exp_or T.kw_or [right]:exp_and {-> New exp.or(left.exp, right.exp)} 
  ;

  exp_and {->exp} = 
    exp_equality {->exp_equality.exp}
    | {and} [left]:exp_and T.kw_and [right]:exp_equality {-> New exp.and(left.exp, right.exp)} 
  ;

  exp_equality {->exp} = 
    exp_relational {->exp_relational.exp}
    | {eq} [left]:exp_equality T.eq [right]:exp_relational {-> New exp.eq(left.exp, right.exp)} 
  ;

  exp_relational  {->exp} = 
    exp_additive {->exp_additive.exp}
    | {lt} [left]:exp_relational T.lt [right]:exp_additive {-> New exp.lt(left.exp, right.exp)} 
    | {gt} [left]:exp_relational T.gt [right]:exp_additive {-> New exp.gt(left.exp, right.exp)} 
  ;

  exp_additive  {->exp} =
    exp_multiplicative   {->exp_multiplicative.exp  }
    | {plus}  [left]:exp_additive T.plus [right]:exp_multiplicative {-> New exp.plus(left.exp, right.exp)} 
    | {minus} [left]:exp_additive T.minus [right]:exp_multiplicative {-> New exp.minus(left.exp, right.exp)} 
  ;

  exp_multiplicative {->exp} = 
    exp_unary {->exp_unary.exp}
    | {mult}[left]:exp_multiplicative T.mult [right]:exp_unary {-> New exp.mult(left.exp, right.exp)} 
    | {div} [left]:exp_multiplicative T.div  [right]:exp_unary {-> New exp.div(left.exp, right.exp)} 
    | {mod} [left]:exp_multiplicative T.mod  [right]:exp_unary {-> New exp.mod(left.exp, right.exp)} 
  ;

  exp_unary  {->exp} = 
    exp_ternary {->exp_ternary.exp}
    | {negative} T.minus [single]:exp_unary  {-> New exp.negative(single.exp)} 
    | {not} T.kw_not [single]:exp_unary {-> New exp.not(single.exp)} 
  ;

  exp_ternary {->exp} = 
    exp_atomic {->exp_atomic.exp}
    | {if} T.kw_if T.l_paren [cond]:exp T.r_paren T.kw_then 
        [truthy]:exp T.kw_else 
        [falsy]:exp_unary 
        {-> New exp.if(cond.exp,truthy.exp,falsy.exp)}
  ;

  exp_atomic {->exp} = 
    {id}       [single]:T.identifier  {-> New exp.id(single)} 
    | {bin}    [single]:T.number_bin  {-> New exp.bin(single)}  
    | {real}   [single]:T.number_frac {-> New exp.real(single)}  
    | {int}    [single]:T.number_int  {-> New exp.int(single)}  
    | {true}   [single]:T.kw_true     {-> New exp.true(single)}  
    | {false}  [single]:T.kw_false    {-> New exp.false(single)} 
    | {block}  [single]:block_exp     {-> single.exp}
    | {call}   [single]:func_call     {-> single.exp}
    | {lambda} [single]:func_lambda   {-> single.exp}
  ;


  block_exp {->exp} = 
    {block} T.l_paren decl_const* exp T.r_paren
        {-> New exp.block([decl_const.decl_const], exp.exp)}
  ;
  
  decl_const {->decl_const} = 
    [lp1]:T.l_paren T.kw_const type [id]:T.identifier 
      [lp2]:T.l_paren exp [rp2]:T.r_paren 
    [rp1]:T.r_paren
        {-> New decl_const(type.type, id, exp.exp)}
  ;

  func_call {->exp}= 
    [id]:T.identifier l_paren list_exp r_paren {-> New exp.call(id,[list_exp.exp])}   
  ;

  func_lambda {->exp} = 
    [lp1]:l_paren kw_lambda 
      [lp2]:l_paren [ids]:list_ids  [rp2]:r_paren colon 
      [lp3]:l_paren [body]:exp       [rp3]:r_paren 
      l_brack       [args]:list_exp  r_brack 
    [rp1]:r_paren
    {-> New exp.lambda([ids.identifier],body,[args.exp])}
  ;

  list_ids {->T.identifier*} =  
    /*Ɛ*/ {-> []}
    | {single} [id]:T.identifier {->[id]}
    | {multiple} [id]:T.identifier pipe [ids]:list_ids {->[id, ids.identifier]}
  ;

 list_exp{->exp*}  =  
    /*Ɛ*/ {-> []}
    | {single}   [arg]:exp {-> [arg.exp]}
    | {multiple} [arg]:exp pipe [rest]:list_exp {-> [arg.exp, rest.exp]}
  ;


Abstract Syntax Tree
  program = decl_func*;
 
  decl_func =  
    kw_entry?
    type          // return type
    T.identifier  // Id of the function
    param*        // List of Parameters
    exp           // Body of the Function
  ;

  param   =  
    {type} type T.identifier 
    | {signature} signature
  ;

  type  =  
    {int} T.kw_integer 
    | {bool} T.kw_bool 
    | {real} T.kw_real
  ;

  signature_param = 
    {type} type 
    | {signature} signature
  ;

  signature =  
    type T.identifier signature_param*
  ;

  exp  = 
    {or}         [left]:exp [right]:exp
    | {and}      [left]:exp [right]:exp
    | {eq}       [left]:exp [right]:exp
    | {lt}       [left]:exp [right]:exp
    | {gt}       [left]:exp [right]:exp
    | {plus}     [left]:exp [right]:exp
    | {minus}    [left]:exp [right]:exp
    | {mult}     [left]:exp [right]:exp
    | {div}      [left]:exp [right]:exp
    | {mod}      [left]:exp [right]:exp
    | {negative} exp  
    | {not}      exp

    | {if}       [cond]:exp [truthy]:exp [falsy]:exp

    | {id}    T.identifier
    | {bin}   T.number_bin 
    | {real}  T.number_frac 
    | {int}   T.number_int 
    | {true}  T.kw_true 
    | {false} T.kw_false

    | {block}    decl_const* exp 
    | {call}     [id]:T.identifier [args]:exp*   
    | {lambda}   [id]:T.identifier* [body]:exp [args]:exp*   
  ;

  decl_const = 
    type T.identifier exp 
  ;
