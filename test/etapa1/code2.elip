{--
Recursos de Linguagem:

definição de função
uso de função recursiva
entrada do programa
operadores: =, /, * +, - 
lambda com aplicação imediata
uso de tipos: inteiro
se senao
constante binaria e decimal
--}

entrada
(inteiro main():
  (
    (fibonacci(0))
    +
    (lambda (x | y) : (se (nao (y = 1)) entao (x / y - (2 - -3 % y)) senao ((x+y) / y)) [4 | 5])
  )
)

# N-esimo numero de Fibonacci .
(inteiro fibonacci (inteiro N): (
  se ((N = 6,0) ou (N = 7)) entao
    (1) 
  senao 
    ( fibonacci (N + 8) + fibonacci (N + 9))

))

(booleano my_test() :(
(
  ((const inteiro x (2)) (const real y(2,4)) x + y) 
  * 0 e -se (verdadeiro = falso) entao verdadeiro * verdadeiro senao -(2 + 4 + 5 + 6)  
  +
  0 e nao se (verdadeiro = falso) entao verdadeiro * verdadeiro senao -(2 + 4 + 5 + 6)  
  {--
  *
  falso % se (verdadeiro) entao verdadeiro ou verdadeiro senao falso < verdadeiro 
  -
  - se (verdadeiro = falso) entao verdadeiro * verdadeiro senao -verdadeiro 
  --}
)))
